[{"path":"https://github.com/CostaLab/CrossTalkeR/articles/CrossTalkeR.html","id":"version-info","dir":"Articles","previous_headings":"","what":"Version Info","title":"CrossTalkeR Cookbook","text":"R version: R version 4.3.2 (2023-10-31) Package version: 1.4.0","code":"suppressPackageStartupMessages({require(CrossTalkeR)}) ## Warning: replacing previous import 'dplyr::as_data_frame' by ## 'igraph::as_data_frame' when loading 'CrossTalkeR' ## Warning: replacing previous import 'dplyr::groups' by 'igraph::groups' when ## loading 'CrossTalkeR' ## Warning: replacing previous import 'clusterProfiler::simplify' by ## 'igraph::simplify' when loading 'CrossTalkeR' ## Warning: replacing previous import 'dplyr::union' by 'igraph::union' when ## loading 'CrossTalkeR' ## Warning: replacing previous import 'igraph::as_data_frame' by ## 'tibble::as_data_frame' when loading 'CrossTalkeR' ## Warning: replacing previous import 'assertthat::has_name' by 'tibble::has_name' ## when loading 'CrossTalkeR' ## Warning: replacing previous import 'igraph::crossing' by 'tidyr::crossing' when ## loading 'CrossTalkeR' suppressPackageStartupMessages({require(igraph)}) suppressPackageStartupMessages({require(ggraph)}) suppressPackageStartupMessages({require(ggplot2)})"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/CrossTalkeR.html","id":"generate-report-example","dir":"Articles","previous_headings":"","what":"Generate Report Example","title":"CrossTalkeR Cookbook","text":"vignette provide examples analyse cell interactions human myelofibrosis single cell RNA-seq dataset.","code":"paths <- c('CTR' = system.file(\"extdata\",                                \"CTR_LR.csv\",                                package = \"CrossTalkeR\"),            'EXP' = system.file(\"extdata\",                                \"EXP_LR.csv\",                                package = \"CrossTalkeR\")) genes <- c('TGFB1|L') output <- system.file(\"extdata\", package = \"CrossTalkeR\") data <- generate_report(paths,                         genes,                         out_path=paste0(output,'/'),                         threshold=0,                         out_file = 'vignettes_example.html',                         output_fmt = \"html_document\",                         report = TRUE)"},{"path":[]},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/CrossTalkeR.html","id":"cci","dir":"Articles","previous_headings":"Individual Visualization","what":"CCI","title":"CrossTalkeR Cookbook","text":"","code":"plot_cci(graph = data@graphs$CTR,         colors = data@colors,         plt_name = 'Example 1',         coords = data@coords[V(data@graphs$CTR)$name,],         emax = NULL,         leg = FALSE,         low = 0,         high = 0,         ignore_alpha = FALSE,         log = FALSE,         efactor = 8,         vfactor = 12)"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/CrossTalkeR.html","id":"sankey-plot","dir":"Articles","previous_headings":"Individual Visualization","what":"Sankey plot","title":"CrossTalkeR Cookbook","text":"","code":"plot_sankey(lrobj_tbl = data@tables$EXP_x_CTR,             target = c(\"TGFB1|L\"),             ligand_cluster = NULL,             receptor_cluster = NULL,             plt_name = \"TGFB1\")"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/CrossTalkeR.html","id":"report-samples","dir":"Articles","previous_headings":"Individual Visualization","what":"Report Samples","title":"CrossTalkeR Cookbook","text":"Single Comparative","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/CrossTalkeR.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"CrossTalkeR Cookbook","text":"","code":"## R version 4.3.2 (2023-10-31) ## Platform: x86_64-pc-linux-gnu (64-bit) ## Running under: Ubuntu 22.04.3 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.10.0  ## LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=de_DE.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=de_DE.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=de_DE.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=de_DE.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Europe/Berlin ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] grid      stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] knitr_1.44            colorBlindness_0.1.9  extrafont_0.19        ##  [4] pals_1.7              graphlayouts_1.0.0    ggrepel_0.9.3         ##  [7] DT_0.28               ComplexHeatmap_2.16.0 factoextra_1.0.7      ## [10] patchwork_1.1.2       stringr_1.5.0         tidyr_1.3.0           ## [13] tibble_3.2.1          dplyr_1.1.2           ggraph_2.1.0          ## [16] ggplot2_3.4.2         igraph_1.5.0.1        CrossTalkeR_1.4.0     ##  ## loaded via a namespace (and not attached): ##   [1] splines_4.3.2           bitops_1.0-7            ggplotify_0.1.1         ##   [4] polyclip_1.10-4         lifecycle_1.0.3         rstatix_0.7.2           ##   [7] doParallel_1.0.17       rprojroot_2.0.3         lattice_0.22-5          ##  [10] MASS_7.3-60             crosstalk_1.2.0         backports_1.4.1         ##  [13] magrittr_2.0.3          sass_0.4.7              rmarkdown_2.23          ##  [16] jquerylib_0.1.4         yaml_2.3.7              mapproj_1.2.11          ##  [19] cowplot_1.1.1           DBI_1.1.3               RColorBrewer_1.1-3      ##  [22] maps_3.4.1              abind_1.4-5             zlibbioc_1.46.0         ##  [25] purrr_1.0.1             BiocGenerics_0.46.0     RCurl_1.98-1.12         ##  [28] yulab.utils_0.0.6       tweenr_2.0.2            circlize_0.4.15         ##  [31] GenomeInfoDbData_1.2.10 IRanges_2.34.1          S4Vectors_0.38.1        ##  [34] enrichplot_1.20.0       tidytree_0.4.4          pkgdown_2.0.7           ##  [37] codetools_0.2-19        DOSE_3.26.1             ggforce_0.4.1           ##  [40] tidyselect_1.2.0        shape_1.4.6             aplot_0.1.10            ##  [43] farver_2.1.1            viridis_0.6.4           matrixStats_1.0.0       ##  [46] stats4_4.3.2            jsonlite_1.8.7          GetoptLong_1.0.5        ##  [49] ellipsis_0.3.2          tidygraph_1.2.3         ggalluvial_0.12.5       ##  [52] iterators_1.0.14        systemfonts_1.0.4       foreach_1.5.2           ##  [55] tools_4.3.2             treeio_1.24.3           ragg_1.2.5              ##  [58] sna_2.7-1               Rcpp_1.0.11             glue_1.6.2              ##  [61] Rttf2pt1_1.3.12         gridExtra_2.3           xfun_0.39               ##  [64] qvalue_2.32.0           GenomeInfoDb_1.36.1     withr_2.5.0             ##  [67] fastmap_1.1.1           boot_1.3-28.1           fansi_1.0.4             ##  [70] SparseM_1.81            digest_0.6.33           networkLite_1.0.5       ##  [73] R6_2.5.1                mime_0.12               gridGraphics_0.5-1      ##  [76] textshaping_0.3.6       colorspace_2.1-0        Cairo_1.6-0             ##  [79] GO.db_3.17.0            dichromat_2.0-0.1       RSQLite_2.3.1           ##  [82] utf8_1.2.3              generics_0.1.3          data.table_1.14.8       ##  [85] httr_1.4.6              htmlwidgets_1.6.2       scatterpie_0.2.1        ##  [88] org.Mm.eg.db_3.17.0     pkgconfig_2.0.3         gtable_0.3.3            ##  [91] blob_1.2.4              networkDynamic_0.11.3   XVector_0.40.0          ##  [94] clusterProfiler_4.8.2   shadowtext_0.1.2        htmltools_0.5.5         ##  [97] carData_3.0-5           fgsea_1.26.0            clue_0.3-64             ## [100] scales_1.2.1            Biobase_2.60.0          png_0.1-8               ## [103] ggfun_0.1.1             reshape2_1.4.4          rjson_0.2.21            ## [106] coda_0.19-4             statnet.common_4.9.0    nlme_3.1-163            ## [109] org.Hs.eg.db_3.17.0     cachem_1.0.8            GlobalOptions_0.1.2     ## [112] parallel_4.3.2          HDO.db_0.99.1           AnnotationDbi_1.62.2    ## [115] desc_1.4.2              pillar_1.9.0            vctrs_0.6.3             ## [118] ggpubr_0.6.0            car_3.1-2               cluster_2.1.6           ## [121] extrafontdb_1.0         netdiffuseR_1.22.5      evaluate_0.21           ## [124] magick_2.7.5            cli_3.6.1               compiler_4.3.2          ## [127] rlang_1.1.1             crayon_1.5.2            MatchIt_4.5.4           ## [130] ggsignif_0.6.4          labeling_0.4.2          plyr_1.8.8              ## [133] fs_1.6.3                stringi_1.7.12          viridisLite_0.4.2       ## [136] network_1.18.1          BiocParallel_1.34.2     assertthat_0.2.1        ## [139] munsell_0.5.0           Biostrings_2.68.1       lazyeval_0.2.2          ## [142] GOSemSim_2.26.1         Matrix_1.5-1            bit64_4.0.5             ## [145] KEGGREST_1.40.0         gsw_1.1-1               broom_1.0.5             ## [148] memoise_2.0.1           oce_1.8-1               bslib_0.5.0             ## [151] ggtree_3.8.2            fastmatch_1.1-3         bit_4.0.5               ## [154] downloader_0.4          ape_5.7-1               gson_0.1.0"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/CrossTalker_install_basicusage.html","id":"crosstalker---installation-and-basic-execution","dir":"Articles","previous_headings":"","what":"CrossTalkeR - Installation and Basic Execution","title":"CrossTalkeR - Installation and Basic Execution","text":"like give short introduction installation basic usage CrossTalkeR.","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/CrossTalker_install_basicusage.html","id":"install","dir":"Articles","previous_headings":"CrossTalkeR - Installation and Basic Execution","what":"Install","title":"CrossTalkeR - Installation and Basic Execution","text":"can install load CrossTalkeR package simple commands : following possible system dependencies:","code":"install.packages(\"devtools\") devtools::install_github(\"https://github.com/CostaLab/CrossTalkeR\", build_vignettes = TRUE) require(CrossTalkeR) libudunits2-dev libgdal-dev gdal-bin libproj-dev proj-data proj-bin libgeos-dev"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/CrossTalker_install_basicusage.html","id":"basic-execution","dir":"Articles","previous_headings":"CrossTalkeR - Installation and Basic Execution","what":"Basic Execution","title":"CrossTalkeR - Installation and Basic Execution","text":"show basic way execute CrossTalkeR. need provide paths ligand-receptor interaction analysis results path save results : also possible just perform analysis part CrossTalker, without generating report: second possibility generate reports existing CrossTalkeR objects. case out_path point folder ‘LR_data_final.Rds’ file.","code":"library(CrossTalkeR)  paths <- c('Condition1' = \"/path/to/condition1/LR-interactions.csv\",            'Condition2' = \"/path/to/condition2/LR-interactions.csv\")  output <- \"/path/to/output/folder/\" data <- generate_report(paths,                 out_path=output,                 out_file = 'vignettes_example.html',                 output_fmt = \"html_document\",                 report = TRUE,                 org = \"hsa\") library(CrossTalkeR)  paths <- c('Condition1' = \"/path/to/condition1/LR-interactions.csv\",            'Condition2' = \"/path/to/condition2/LR-interactions.csv\")  output <- \"/path/to/output/folder/\" data <- analise_LR(paths,                 out_path=output,                 org = \"hsa\") library(CrossTalkeR)  output <- \"/path/to/output/folder/\" data <- make_report(out_path=output,                 out_file = 'vignettes_example.html',                 output_fmt = \"html_document\",                 report = TRUE,                 org = \"hsa\")"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/HumanFibrosis.html","id":"cell-cell-communication-analysis-of-human-myelofibrosis-scrna-seq-data-using-crosstalker","dir":"Articles","previous_headings":"","what":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","title":"CrossTalkeR Example - Human Myelofibrosis","text":", demonstrate usage CrossTalkeR case study Myelofibrosis scRNA-seq data set paper. predicted ligand-receptor interactions used tutorial provided within package. differ sightly results presented paper, since recomputed using cellphoneDB Method liana package consensus interaction database. scRNA-seq data contains two conditions: control (CTR_LR.csv) disease condition (EXP_LR.csv). first show run liana retrieve ligand receptor activities, execute CrossTalkeR finally go results, also provided inside resulting CrossTalkeR report.","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/HumanFibrosis.html","id":"run-liana-for-ligand-receptor-interaction-prediction-in-python","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","what":"Run liana for Ligand-Receptor Interaction Prediction in Python","title":"CrossTalkeR Example - Human Myelofibrosis","text":"prediction ligand-receptor interactions, use python version package liana. package provides different methods databases analysis intercellular interactions based scRNA-seq data AnnData format. Tutorial, describe recommendation using liana package python. First , libraries necessary using liana must loaded: assume necessary libraries already installed. , perfoming analysis, need load AnnData object scRNA-seq data mentioned beginning, different methods databases implemented liana package. recommend using CellphoneDB analysis combination consensus database intercellular interactions. Note metadata fields available sample/conditions (field_with_condition) cell annotations (field_with_cell_annotation) still specified user. Finally, result tables filtered CellphoneDB p-value (example p-val < 0.05) converted CrossTalkeR input format. default, interaction table used CrossTalkeR contain columns “source”, “target”, “type_gene_A”, “gene_A”, “type_gene_B”, “gene_B” “MeanLR”.","code":"import scanpy as sc import liana as li import pandas as pd import os data = sc.read_h5ad(\"/path/to/AnnData/file.h5ad\") data.raw = data for i in set(data.obs['field_with_condition']):     print(i)     lr=li.method.cellphonedb(data[data.obs['field_with_condition']==i],                           groupby='field_with_cell_annotation',                           expr_prop=0.1,                           verbose=True,                           resource_name='consensus',                           inplace=False)     lr.to_csv(f\"{i}_lr_liana_consensus_unfiltered.csv\") data = {} for i in os.listdir():     if i.endswith('lr_liana_consensus_unfiltered.csv'):         evfull = pd.read_csv(i)         evfull = evfull.loc[:,['ligand','receptor','source','target','lr_means','cellphone_pvals']]         evfull['type_gene_A'] = 'Ligand'         evfull['type_gene_B'] = 'Receptor'         evfull['gene_A'] = evfull['ligand']         evfull['gene_B'] = evfull['receptor']         evfull['MeanLR'] = evfull['lr_means']         evfull.loc[list(evfull.cellphone_pvals.to_numpy()<=0.05),:].to_csv(f'{k}_lr_ready.csv')         evfull = evfull.loc[:, ['source', 'target', 'type_gene_A', 'type_gene_B', 'gene_A', 'gene_B', 'MeanLR']]         k=i[0:i.find('_lr_')]         data[k]=os.path.abspath(f'{k}_lr_ready.csv')"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/HumanFibrosis.html","id":"running-crosstalker","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","what":"Running CrossTalkeR","title":"CrossTalkeR Example - Human Myelofibrosis","text":"First, need import CrossTalkeR package define named list either paths Ligand-Receptor interaction tables, directly dataframe objects condition interest. Please note possible run CrossTalkeR two conditions. load files within package. can define path like save results (output) run CrossTalkeR generate_report() function: Besides passing paths interaction tables output folder, also define: out_file - suffix result reports output_fmt - file type result reports report - boolean value reports created result successful execution, receive three seurat objects (LR_data.Rds, LR_data_step2.Rds LR_data_final.Rds), well two html-reports(SingleCondition.html ComparativeCondition.html). LR_data_final.Rds contains results produced CrossTalkeR two html-reports contain visualization results inside R object. possible load results CrossTalkeR analysis “LR_data_final.Rds” R-object produce plots separately. following going take look different results within two reports, step step.","code":"library(CrossTalkeR) library(igraph) library(stringr)  paths <- c('CTR' = system.file(\"extdata\",                                \"CTR_LR.csv\",                                package = \"CrossTalkeR\"),            'EXP' = system.file(\"extdata\",                                \"EXP_LR.csv\",                                package = \"CrossTalkeR\"))  output <- system.file(\"extdata\", package = \"CrossTalkeR\") data <- generate_report(paths,                 out_path=paste0(output,'/'),                 out_file = 'vignettes_example.html',                 output_fmt = \"html_document\",                 report = TRUE)"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/HumanFibrosis.html","id":"single-condition-report","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","what":"Single Condition Report","title":"CrossTalkeR Example - Human Myelofibrosis","text":"first report contains results analysed condition considered separately. case section plot control condition (CTR) disease condition (EXP). two main sections report. first one deals cell-cell-interactions second cell-gene-interactions, means analysis ligand receptor gene level.","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/HumanFibrosis.html","id":"cell-cell-interaction-analysis-results","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR > Single Condition Report","what":"Cell-Cell-Interaction Analysis Results","title":"CrossTalkeR Example - Human Myelofibrosis","text":"cell-cell-interaction (CCI) graph plots focus interactions different cell types within data. focus three measures inside plot: Percentage interactions indicated opacity arrows Edge weight (sum single L-R interaction scores cell type pairs) indicated edge color Pagerank (Node importance) indicated node size loading result data “LR_data_final.Rds”, can plot cell-cell interactions plot_cci() function. show plot analysed condition:  control plot can see high proportion interactions MSCs talking well MSC Fibroblasts talking . interaction also higher weight, can seen edge color. important node pagerank MSC node. analysing plot disease condition, see high proportions interactions self-talking MSCs important node pagerank MSC node. MSC talking Megakaryocytes. really compare two conditions recommend using Comparative report results.","code":"data <- readRDS(system.file(\"extdata\", \"LR_data_final.Rds\", package = \"CrossTalkeR\")) p1 <- plot_cci(graph = data@graphs$CTR,         colors = data@colors,         plt_name = 'Control',         coords = data@coords[V(data@graphs$CTR)$name,],         emax = NULL,         leg = FALSE,         low = 0,         high = 0,         ignore_alpha = FALSE,         log = FALSE,         efactor = 8,         vfactor = 12,         pg = data@rankings[[\"CTR\"]]$Pagerank)  p2 <- plot_cci(graph = data@graphs$EXP,         colors = data@colors,         plt_name = 'Disease',         coords = data@coords[V(data@graphs$EXP)$name,],         emax = NULL,         leg = FALSE,         low = 0,         high = 0,         ignore_alpha = FALSE,         log = FALSE,         efactor = 8,         vfactor = 12,         pg = data@rankings[[\"EXP\"]]$Pagerank)  print(p1+p2)"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/HumanFibrosis.html","id":"analysis-on-the-gene-cell-interaction-level","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR > Single Condition Report","what":"Analysis on the Gene-Cell Interaction Level","title":"CrossTalkeR Example - Human Myelofibrosis","text":"provide several different possibilities analyse ligand-receptor interactions gene level. CrossTalkeR, topological network measures calculated node(gene) build networks. measures include Influencer (depending outgoing edges), Listener(depending incoming edges), Mediator (depending outgoing incoming edges), Pagerank (overall importance) rankings. ligand receptors can ranked measures can identify possibly relevant genes considering top genes rankings. report provide interactive table rankings gene network. example top 10 genes Pagerank ranking preset conditions form Barplots:  perform analysis gene-gene interaction level like principal component analysis (PCA), focus result condition comparison results described next section.","code":"rankings_table <- data@rankings$CTR_ggi %>%   arrange(Pagerank) rankings_table <- tail(rankings_table, n=10) signal <- ifelse(rankings_table$Pagerank < 0, 'negative', 'positive') p1 <- ggplot(rankings_table, aes(x = Pagerank, y = reorder(nodes, Pagerank), fill = signal)) +         geom_bar(stat = \"identity\") +         scale_fill_manual(values = c(Blue2DarkOrange18Steps[14])) +         theme_minimal() +         ggtitle(\"Top Listener in Control Condition\")   rankings_table <- data@rankings$EXP_ggi %>%   arrange(Pagerank) rankings_table <- tail(rankings_table, n=10) signal <- ifelse(rankings_table$Pagerank < 0, 'negative', 'positive') p2 <- ggplot(rankings_table, aes(x = Pagerank, y = reorder(nodes, Pagerank), fill = signal)) +         scale_fill_manual(values = c(Blue2DarkOrange18Steps[14])) +         geom_bar(stat = \"identity\") +         theme_minimal() +         ggtitle(\"Top Listener in Disease Condition\") print(p1+p2)"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/HumanFibrosis.html","id":"compared-condition-results","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","what":"Compared Condition Results","title":"CrossTalkeR Example - Human Myelofibrosis","text":"CrossTalkeR analyzes conditions individually also calculates differences cell-cell interactions conditions. results analyses presented comparative report. example compare disease (EXP) control (CTR) condition.","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/HumanFibrosis.html","id":"cell-cell-interaction-analysis-results-1","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR > Compared Condition Results","what":"Cell-Cell-Interaction analysis results","title":"CrossTalkeR Example - Human Myelofibrosis","text":"single condition results, first part results deal cell-cell interactions. show CCI graph plot, now compared conditions:  main difference previous CCI graph plots edge weights can now positive also negative, well Pagerank values nodes. Positive values mean interactions cell types higher activity/importance EXP condition, negative values indicate lower activity/importannce EXP condition (higher CTR). can see CCI plot , negative edge weights dominate , especially MSC-MSC, MSC-Fibroblast, Fibroblast-MSC interactions. Thus, can conclude interactions stronger CTR condition. counterexample Megakaryocyte-MSC interaction, can see opaqueness interactions account smaller proportion. Since created CCI network can also analyze based topological properties identify possible biologically relevant processes. purpose, topological measures can used already used single condition report gene-cell interactions analysis (Influencer, Listener, Mediator, Pagerank). , can look rankings individually form bar plots. example Pagerank cell types network:  comparison, Neural cells highest pagerank, suggest high importance network EXP condition. negative direction, MSC Fibroblast cells similar low Pagerank. suggest higher importance CTR condition. analysis step perform PCA already calculated topological measures. results PCA can found form 2D plot report. show first two dimensions PCA:  plot, indicate direction topological measure labeled arrows. serves facilitate interpretation results PCA. can see plot Myeloid cells take role mediator also Neural cells high pagerank well Listener ranking EXP condition. contrary, MSCs Fibroblasts low Listener rank Pagerank EXP condition, fits results bar chart. case, extract information Influencer, ranking indicated two dimensions shown (arrow present PCA plot). suggest plotting Influencer rankings bar plot:  Now can identify Megakaryocytes influencing celltype EXP condition MSC CTR condition.","code":"plot_cci(graph = data@graphs$EXP_x_CTR,         colors = data@colors,         plt_name = 'Disease vs Control',         coords = data@coords[V(data@graphs$EXP_x_CTR)$name,],         emax = NULL,         leg = FALSE,         low = 0,         high = 0,         ignore_alpha = FALSE,         log = FALSE,         efactor = 8,         vfactor = 12, pg = data@rankings[[\"EXP_x_CTR\"]]$Pagerank) for(i in 2:length(names(data@rankings))){   curr <- names(data@rankings)[i]   if(str_detect(curr, '_x_', negate = FALSE) & !str_detect(curr, 'ggi', negate = FALSE)){     signal <- ifelse(data@rankings[[curr]]$Pagerank < 0, 'negative','positive')     print(ggplot(data@rankings[[curr]], aes(x=Pagerank,y=reorder(nodes,Pagerank),fill=signal))+         geom_bar(stat=\"identity\")+         scale_fill_manual(values = c(Blue2DarkOrange18Steps[4],Blue2DarkOrange18Steps[14]))+         theme_minimal())   } } print(plot_pca_LR_comparative(data,                         \"EXP_x_CTR\",                         dims=c(1,2),                         ret=T,                         ggi=FALSE)) for(i in 2:length(names(data@rankings))){   curr <- names(data@rankings)[i]   if(str_detect(curr, '_x_', negate = FALSE) & !str_detect(curr, 'ggi', negate = FALSE)){     signal <- ifelse(data@rankings[[curr]]$Influencer < 0, 'negative','positive')     print(ggplot(data@rankings[[curr]], aes(x=Influencer,y=reorder(nodes,Influencer),fill=signal))+         geom_bar(stat=\"identity\")+         scale_fill_manual(values = c(Blue2DarkOrange18Steps[4],Blue2DarkOrange18Steps[14]))+         theme_minimal())   } }"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/HumanFibrosis.html","id":"cell-gene-interaction-analysis-results","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR > Compared Condition Results","what":"Cell-Gene-Interaction Analysis Results","title":"CrossTalkeR Example - Human Myelofibrosis","text":"second part report deals interactions gene level. , procedure similar one described last section cell-cell interactions analysis performed single conditions. First , can look results topological rankings form bar plots, using example pagerank:  plot gives us information ligand receptor genes play important role condition. case, top genes , positive negative, directions receptor genes. ITGB1 receptor Megakaryocytes high importance EXP condition, followed genes like ERBB2 LAG3 MSCs. Since receptor CD44 Fibroblast high negative value , means important CTR condition. Thus, can identify first interesting genes possible analysis. can follow analysing results PCA performed topological measures gene level:  PCA results now contain receptor ligand genes, identified important outliers. First, find receptor genes ITGB1 Megakaryocytes CD44 Fibroblast, identified important . Besides high Pagerank, two genes also high Listener rank. addition, ligand genes CALM1 Megakaryocytes Myeloid cells, COL1A1 MSCs TGFB1 Megakaryocytes can identified important Influencers EXP condition. Interesting also, ligand gene TGFB1 also important CTR condition Fibroblasts. also interesting candidate gene, especially since known driver fibrosis cancer resulted disease. Important note: might noticed, arrow indicating genes function Mediator. case ligand-receptor interactions Mediator genes since considering pairwise interactions. also caused fact, distinguish biological function every gene assigning database annotated role (either receptor ligand).","code":"all_data <- data for (i in 2:length(names(all_data@rankings))) {   curr <- names(all_data@rankings)[i]   if (str_detect(curr, '_x_', negate = FALSE) & str_detect(curr, 'ggi', negate = FALSE)) {     tmp <- top_n(all_data@rankings[[curr]], 20, abs(.data$Pagerank))     signal <- ifelse(tmp$Pagerank < 0, 'negative', 'positive')     print(ggplot(tmp, aes(x = Pagerank, y = reorder(nodes, Pagerank), fill = signal)) +             geom_bar(stat = \"identity\") +             scale_fill_manual(values = c(Blue2DarkOrange18Steps[4], Blue2DarkOrange18Steps[14])) +             theme_minimal())   } } print(plot_pca_LR_comparative(data,                               \"EXP_x_CTR_ggi\",                               dims = c(1, 2),                               ret = T,                               ggi = TRUE,                               include_tf = FALSE))"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/HumanFibrosis.html","id":"follow-up-analysis","dir":"Articles","previous_headings":"","what":"Follow-up Analysis","title":"CrossTalkeR Example - Human Myelofibrosis","text":"Since got first impression data previous results, can deepen analysis. example, TGFB1 Megakaryocytes Fibroblasts, CD44 Fibroblasts ITGB1 Megakaryocytes interesting genes. CrossTalkeR, can look even closely interactions involving genes using Sanley plots. two ways . First, can regenerate report , time passing list genes interest: second option plot Sankey plots genes interests, without redoing report:  Sankey plot, interactions involving TGFB1 ligand gene shown, high score. number actual interactions can controlled threshold parameter. example 50 interactions selected. Since entered one target gene without information, can now also see interactions originating different cell types, Fibroblasts, Megakaryocytes MSCs. Furthermore, now list receptors associated cell types TGFB1 ligand can possibly interact. list also includes receptor ITGB1 Megakaryocytes, also gene interest. interaction TGFB1 ITGB1 positive score, means enriched EXP condition. third gene interest receptor gene CD44 high importance Fibroblast. want focus CD44 Fibroblast, can define receptor_cluster value running Sankey plot function. Also, number interactions included reduced setting threshold parameter 15.  , top 15 interactions negative weight, meaning relevant CTR condition. interesting interaction Fibroblast COL1A1 CD44, since COL1A1 also came th PCA plot high ranked Influencer CTR condition.","code":"genes_of_interest <- c('TGFB1|L',                        'CD44|R',                        'ITGB1|R')  data <- make_report(out_path=output,                     genes = genes_of_interest,                     out_file = 'vignettes_example.html',                     output_fmt = \"html_document\",                     report = TRUE,                     org = \"hsa\") plot_sankey(data@tables$EXP_x_CTR,             target = \"TGFB1|L\",             ligand_cluster = NULL,             receptor_cluster = NULL,             plt_name = \"TGFB1 ligand gene interactions EXP vs CTR\",             threshold = 50, tfflag = FALSE) plot_sankey(data@tables$EXP_x_CTR,             target = \"CD44|R\",             ligand_cluster = NULL,             receptor_cluster = \"Fibroblast\",             plt_name = \"Fibroblast CD44 receptor gene interaction EXP vs CTR\",             threshold = 15, tfflag = FALSE)"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/HumanFibrosis.html","id":"report-samples","dir":"Articles","previous_headings":"","what":"Report Samples","title":"CrossTalkeR Example - Human Myelofibrosis","text":"Single Condition Report Comparative Condition Report","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/HumanFibrosis.html","id":"further-tutorials","dir":"Articles","previous_headings":"","what":"Further Tutorials","title":"CrossTalkeR Example - Human Myelofibrosis","text":"want learn infer ligand receptor interactions liana use CrossTalkeR, check tutorial: Run liana.","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/LR2TF_analysis.html","id":"teanscription-factor-activity-analysis-on-human-myelofibrosis-scrna-seq-data-using-the-lr2tf-package-and-crosstalker","dir":"Articles","previous_headings":"","what":"Teanscription Factor Activity Analysis on Human Myelofibrosis scRNA-seq Data Using the LR2TF Package and CrossTalkeR","title":"CrossTalkeR Cookbook","text":"guide usage LR2TF package infer TF activities scRNA-seq data. transcription factor activities estimated using decoupleR tool. Using DoRothEA regulon version decoupleR post-translational interactions Omnipath database[2,3,4], connections made transcription factors ligands receptors. results can combined ligand-receptor interactions analyzed using CrossTalkeR (https://github.com/CostaLab/CrossTalkeR/) [5].","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/LR2TF_analysis.html","id":"installation","dir":"Articles","previous_headings":"Teanscription Factor Activity Analysis on Human Myelofibrosis scRNA-seq Data Using the LR2TF Package and CrossTalkeR","what":"Installation","title":"CrossTalkeR Cookbook","text":"package can installed directly github:    ","code":"library(devtools) install_github(\"CostaLab/LR2TF\")  library(remotes) install_github(\"CostaLab/LR2TF\", build_vignettes = TRUE)"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/LR2TF_analysis.html","id":"transcription-factor-activity-predictions-using-decoupler-in-python","dir":"Articles","previous_headings":"Teanscription Factor Activity Analysis on Human Myelofibrosis scRNA-seq Data Using the LR2TF Package and CrossTalkeR","what":"Transcription factor activity predictions using decoupleR in python","title":"CrossTalkeR Cookbook","text":"transcription factor activity predictions recommend using decoupleR package python version. provides better performance, especially larger data sets. perform predictions decoupleR, need AnnData (.h5ad) file. scRNA-seq data saved Seurat object (.Rds file), can converted AnnData format using sceasy package function provide: file “anndata_object.h5ad” saved user defined path used perform predictions. Beside scRNA-seq data file, also need define regulon database form csv file coloumns “source”, “target” “weight”. Within package provide dorothea databases human mouse, downloaded decoupleR package. files also contain column “confidence” (levels D) information well described transcription factor target gene interaction different resources. recommend using confidence levels B. Now possible run transcription factor activity prediction decoupleR:","code":"library(LR2TF) library(Seurat)  #load own dataset: seurat_object <- readRDS(\"/path/to/seurat_object.Rds\")  #test dataset from package: data(bone_marrow_stromal_cell_example, package = \"LR2TF\") seurat_object <- bone_marrow_stromal_cell_example  LR2TF::convert_seurat_to_anndata(seurat_object, \"/path/to/save/AnnData/object/\") regulon <- read.csv(system.file(\"regulons\", \"human_dorothea_reg.csv\", package = \"LR2TF\"), row.names = 1) filtered_regulon <- regulon[regulon$confidence %in% c(\"A\",\"B\"),] write.csv(\"/path/to/save/filterd_regulon.csv\") import scanpy as sc import decoupler as dc import pandas as pd  ann_data = sc.read_h5ad(\"/path/to/AnnData/object/anndata_object.h5ad\") reg = pd.read_csv(\"/path/to/filterd_regulon.csv\")  dc.run_viper(mat=ann_data, net=reg, source='source', target='target', weight='weight', verbose=True, use_raw=False)  estimates = ann_data.obsm['viper_estimate'] estimates.to_csv(\"/path/to/save/decoupler_results.csv\")"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/LR2TF_analysis.html","id":"using-the-lr2tf-package","dir":"Articles","previous_headings":"Teanscription Factor Activity Analysis on Human Myelofibrosis scRNA-seq Data Using the LR2TF Package and CrossTalkeR","what":"Using the LR2TF package","title":"CrossTalkeR Cookbook","text":"Now, transcription factor activity matrix, can continue analysis LR2TF package. case use test data example. First , necessary define following parameters form list: defining necessary parameter transcription factor activity can performed calling: “results” object contains results performed analyses, consisting multiple tables inside object: tf_activities_condition: Tables condition significant transcription factors compared condition tf_activities_cluster: Tables cluster specific transcription factors conditions data average_gene_expression: Matrices condition average gene expressions regulon: Regulon used analysis specified user CTR_input_condition: condition table receptor-transcription factor transcription factor-ligand interactions based condition specific transcription factors (input CrossTalker) CTR_input_cluster: condition table receptor-transcription factor transcription factor-ligand interactions based cluster specific transcription factors (input CrossTalker) intracellular_network_condition: condition table receptor-transcription factor transcription factor-target gene interactions based condition specific transcription factors intracellular_network_cluster: condition table receptor-transcription factor transcription factor-target gene interactions based cluster specific transcription factors (Note special characters might exchanged underscores, cause problems naming tables; eg PMF,MF2 -> PMF_MF2) last step combine previous results ligand receptor interaction analyses (e.g. CellPhoneDB) transcription factor results. (case test data ligand-receptor interactions provided within CrossTalkeR package.)","code":"parameters <- list(\"out_path\" = \"/path/to/save/results\",                    reg = \"/path/to/filterd_regulon.csv\",                    \"organism\" = \"human\",                    \"celltype\" = \"new_annotation\", #name of the meta data field defining cell identities                    \"condition\" = \"protocol\", #name of the meta data field defining conditions                    \"comparison_list\" = list(c(\"PMF,MF2\", \"control\")), #list of condition comparison to consider                    \"logfc\" = 0.5,                    \"pval\" = 0.05, #thresholds for logfc and pval used in differential transcription factor analysis                    \"num_cell_filter\" = 0) #define the minimum number of cells per cluster to perform the analysis on results <- LR2TF::tf_activity_analysis(seuratobject = seurat_object,                                        tf_activities = \"/path/to/decoupler_results.csv\",                                        arguments_list = parameters) #First possibility: Read the csv files with LR interaction results and then combine them with the TF interaction results table_ctr <- read.csv(\"/path/to/control_lr_results.csv\", row.names = 1) table_exp <- read.csv(\"/path/to/PMF,MF2_lr_results.csv\", row.names = 1)  ctr_inptu <- LR2TF::combine_LR_and_TF(results@CTR_input_condition[[\"control\"]], table_ctr, parameters$out_path, \"control\") exp_input <- LR2TF::combine_LR_and_TF(results@CTR_input_condition[[\"PMF_MF2\"]], table_exp, parameters$out_path, \"PMF_MF2\")  #Second possibility: Directly pass the path to the LR interaction csv files to combine them with the TF interaction results ctr_file <- \"/path/to/control_lr_results.csv\" exp_file <- \"/path/to/PMF,MF2_lr_results.csv\"  ctr_inptu <- LR2TF::combine_LR_and_TF(results@CTR_input_condition[[\"control\"]], ctr_file, parameters$out_path, \"control\") exp_input <- LR2TF::combine_LR_and_TF(results@CTR_input_condition[[\"PMF_MF2\"]], exp_file, parameters$out_path, \"PMF_MF2\")"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/LR2TF_analysis.html","id":"run-crosstalker","dir":"Articles","previous_headings":"Teanscription Factor Activity Analysis on Human Myelofibrosis scRNA-seq Data Using the LR2TF Package and CrossTalkeR","what":"Run CrossTalkeR","title":"CrossTalkeR Cookbook","text":"Now one input table condition interest, can used run CrossTalkeR:","code":"library(CrossTalkeR) library(igraph) library(stringr)  paths <- c('control' = ctr_inptu,            'PMF_MF2' = exp_input)  output <- (\"/path/to/save/folder\") data <- generate_report(paths,                 out_path=paste0(output,'/'),                 out_file = 'HumanMyfib_TF_example.html',                 output_fmt = \"html_document\",                 report = TRUE,                 comparison = list(c('PMF_MF2', 'control')))"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/LR2TF_analysis.html","id":"references","dir":"Articles","previous_headings":"Teanscription Factor Activity Analysis on Human Myelofibrosis scRNA-seq Data Using the LR2TF Package and CrossTalkeR","what":"References","title":"CrossTalkeR Cookbook","text":"[1] Garcia-Alonso L, Holland CH, Ibrahim MM, Turei D, Saez-Rodriguez J. “Benchmark integration resources estimation human transcription factor activities.” Genome Research. 2019. DOI: 10.1101/gr.240663.118. [2] Valdeolivas, D Turei, Gabor (2019) “OmnipathR: client OmniPath web service.” Bioconductor Package [3] D Turei, T Korcsmaros J Saez-Rodriguez (2016) OmniPath: guidelines gateway literature-curated signaling pathway resources. Nature Methods 13 (12); PMID: 27898060 [4] D Turei, Valdeolivas, L Gul, N Palacio-Escat, M Klein, O Ivanova, M Olbei, Gabor, F Theis, D Modos, T Korcsmaros J Saez-Rodriguez (2021) Integrated intra- intercellular signaling knowledge multicellular omics analysis. Molecular Systems Biology 17: e9923; DOI: 10.15252/msb.20209923 [5] James S Nagai, Nils B Leimkühler, Michael T Schaub, Rebekka K Schneider, Ivan G Costa, CrossTalkeR: analysis visualization ligand–receptorne tworks, Bioinformatics, Volume 37, Issue 22, 15 November 2021, Pages 4263–4265, https://doi.org/10.1093/bioinformatics/btab370","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/run_liana.html","id":"run-liana-for-ligand-receptor-interaction-prediction-in-python","dir":"Articles","previous_headings":"","what":"Run liana for ligand-receptor interaction prediction in Python","title":"Run liana for Ligand Receptor Interaction Prediction","text":"prediction ligand-receptor interactions, use python version package liana. package provides different methods databases analysis intercellular interactions based scRNA-seq data AnnData format. Tutorial, describe recommendation using liana package python.","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/run_liana.html","id":"import-necessary-libraries","dir":"Articles","previous_headings":"Run liana for ligand-receptor interaction prediction in Python","what":"Import necessary libraries","title":"Run liana for Ligand Receptor Interaction Prediction","text":"First , libraries necessary using liana must loaded: assume necessary libraries already installed.","code":"import scanpy as sc import liana as li import pandas as pd import os"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/run_liana.html","id":"load-scrna-seq-data","dir":"Articles","previous_headings":"Run liana for ligand-receptor interaction prediction in Python","what":"Load scRNA-seq data","title":"Run liana for Ligand Receptor Interaction Prediction","text":"last step perfoming analysis load AnnData object scRNA-seq data","code":"data = sc.read_h5ad(\"/path/to/AnnData/file.h5ad\") data.raw = data"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/run_liana.html","id":"execution-of-ligand-receptor-interaction-analysis","dir":"Articles","previous_headings":"Run liana for ligand-receptor interaction prediction in Python","what":"Execution of ligand-receptor interaction analysis","title":"Run liana for Ligand Receptor Interaction Prediction","text":"mentioned beginning, different methods databases implemented liana package. recommend using CellphoneDB analysis combination consensus database intercellular interactions. Note metadata fields available sample/conditions (field_with_condition) cell annotations (field_with_cell_annotation) still specified user.","code":"for i in set(data.obs['field_with_condition']):     print(i)     lr=li.method.cellphonedb(data[data.obs['field_with_condition']==i],                           groupby='field_with_cell_annotation',                           expr_prop=0.1,                           verbose=True,                           resource_name='consensus',                           inplace=False)     lr.to_csv(f\"{i}_lr_liana_consensus_unfiltered.csv\")"},{"path":"https://github.com/CostaLab/CrossTalkeR/articles/run_liana.html","id":"filtering-and-formatting-of-the-results","dir":"Articles","previous_headings":"Run liana for ligand-receptor interaction prediction in Python","what":"Filtering and formatting of the results","title":"Run liana for Ligand Receptor Interaction Prediction","text":"Finally, result tables filtered CellphoneDB p-value (example p-val < 0.05) converted CrossTalkeR input format. default, interaction table used CrossTalkeR contain columns “source”, “target”, “type_gene_A”, “gene_A”, “type_gene_B”, “gene_B” “MeanLR”.","code":"data = {} for i in os.listdir():     if i.endswith('lr_liana_consensus_unfiltered.csv'):         evfull = pd.read_csv(i)         evfull = evfull.loc[:,['ligand','receptor','source','target','lr_means','cellphone_pvals']]         evfull['type_gene_A'] = 'Ligand'         evfull['type_gene_B'] = 'Receptor'         evfull['gene_A'] = evfull['ligand']         evfull['gene_B'] = evfull['receptor']         evfull['MeanLR'] = evfull['lr_means']         evfull.loc[list(evfull.cellphone_pvals.to_numpy()<=0.05),:].to_csv(f'{k}_lr_ready.csv')         evfull = evfull.loc[:, ['source', 'target', 'type_gene_A', 'type_gene_B', 'gene_A', 'gene_B', 'MeanLR']]         k=i[0:i.find('_lr_')]         data[k]=os.path.abspath(f'{k}_lr_ready.csv')"},{"path":"https://github.com/CostaLab/CrossTalkeR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vanessa Kloeker. Author. James Shiniti Nagai. Author, maintainer. Nils Leimkühler. Author. Michael T.  Schaub. Author. Rebekka Schneider. Author. Ivan Costa Gesteira. Author.","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kloeker V, Nagai J, Leimkühler N, Schaub M, Schneider R, Gesteira   (2024). CrossTalkeR: Single Cell Ligand Receptor Downstream analysis. R package version 1.4.0, https://github.com/CostaLab/CrossTalkeR.","code":"@Manual{,   title = {CrossTalkeR: Single Cell Ligand Receptor Downstream analysis},   author = {Vanessa Kloeker and James Shiniti Nagai and Nils Leimkühler and Michael T.  Schaub and Rebekka Schneider and  Ivan Costa Gesteira},   year = {2024},   note = {R package version 1.4.0},   url = {https://github.com/CostaLab/CrossTalkeR}, }"},{"path":"https://github.com/CostaLab/CrossTalkeR/index.html","id":"crosstalker-","dir":"","previous_headings":"","what":"Single Cell Ligand Receptor Downstream analysis","title":"Single Cell Ligand Receptor Downstream analysis","text":"James S. Nagai1, Nils B. Leimkühler2, Michael T. Schaub 3, Rebekka K. Schneider4,5,6, Ivan G. Costa1* 1Institute Computational Genomics, Faculty Medicine, RWTH Aachen University, Aachen, 52074 Germany 2Department Hematology Stem Cell Transplantation, University Hospital Essen, Germany 3Department Computer Science, RWTH Aachen University, Germany 4Department Cell Biology, Institute Biomedical Engineering, Faculty Medicine,RWTH Aachen University, Pauwelsstrasse 30, 52074 Aachen, NRW, Germany 5Oncode Institute, Erasmus Medical Center, Rotterdam, 3015GD, Netherlands 6Department Hematology, Erasmus Medical Center, Rotterdam, 3015GD, Netherlands  Motivation: Ligand-receptor (LR) analysis allows characterization cellular crosstalk single cell RNA-seq data. However, current LR methods provide limited approaches prioritization cell types, ligands receptors characterizing changes crosstalk two biological conditions. Results: CrossTalkeR framework network analysis visualisation LR networks. CrossTalkeR identifies relevant ligands, receptors cell types contributing changes cell communication contrasting two biological states: disease vs. homeostasis. case study scRNA-seq human myeloproliferative neoplasms reinforces strengths CrossTalkeR characterisation changes cellular crosstalk disease state.","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Single Cell Ligand Receptor Downstream analysis","text":"can install CrossTalkeR simple commands : Note: Please avoid use following characters celltype name: ‘$’","code":"install.packages(\"devtools\") devtools::install_github(\"https://github.com/CostaLab/CrossTalkeR\", build_vignettes = TRUE) require(CrossTalkeR)"},{"path":"https://github.com/CostaLab/CrossTalkeR/index.html","id":"possible-system-dependencies","dir":"","previous_headings":"","what":"Possible system dependencies","title":"Single Cell Ligand Receptor Downstream analysis","text":"","code":"libudunits2-dev libgdal-dev gdal-bin libproj-dev proj-data proj-bin libgeos-dev"},{"path":"https://github.com/CostaLab/CrossTalkeR/index.html","id":"crosstalker-plots-examples-and-vignette","dir":"","previous_headings":"","what":"CrossTalkeR Plots examples and vignette","title":"Single Cell Ligand Receptor Downstream analysis","text":"provide vignette examples analyse cell interactions human myelofibrosis single cell RNA-seq.","code":"vignette('CrossTalkeR-HumanMyfib')"},{"path":"https://github.com/CostaLab/CrossTalkeR/index.html","id":"integration-of-liana-with-crosstalker","dir":"","previous_headings":"","what":"Integration of liana with CrossTalkeR","title":"Single Cell Ligand Receptor Downstream analysis","text":"provide tutorial integrate predictions liana Crosstalker. Run liana","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/index.html","id":"new-features-v140","dir":"","previous_headings":"","what":"New Features v1.4.0","title":"Single Cell Ligand Receptor Downstream analysis","text":"analise_LR() run analysis without generating CrossTalkeR report make_report() generate new CrossTalkeR report existing CrossTalkeR results now consider annotation gene ligand (L) receptor (R) consider biological function Less constrains cell cluster name annotation (‘$’ must avoided cluster naming) Integration liana-py ligand-receptor interaction predictions","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/index.html","id":"old-features-v130","dir":"","previous_headings":"","what":"Old Features v1.3.0","title":"Single Cell Ligand Receptor Downstream analysis","text":"Cell Cell Interaction visualization Sending Receiving Cells Ranking Gene Target based Sankey Plots measures PC table PC1 PC2 based barplot Leimkühler et. al. [2] data added package Fisher Test implemented highlight CCI edges significance (new) 🔥NEW🔥 python3 notebook available cast old input new input. Liana (Dimitrov et. al. [3]) Output can used CrossTalkeR input. 🔥NEW🔥 LR pair visualization plot can done using Seurat Object 🔥NEW🔥","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Single Cell Ligand Receptor Downstream analysis","text":"[1] CrossTalkeR: Analysis Visualisation Ligand Receptor Networks link [2] Heterogeneous bone-marrow stromal progenitors drive myelofibrosis via druggable alarmin axis. link [3] Comparison Resources Methods infer Cell-Cell Communication Single-cell RNA Data link","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/LRObj-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Run and Generate all LR Downstream analysis — LRObj-class","title":"Run and Generate all LR Downstream analysis — LRObj-class","text":"function loads single conditions LR outputs return LR network assumes table present following columns Ligand, measure","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/LRObj-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Run and Generate all LR Downstream analysis — LRObj-class","text":"graphs Cell Cell Interaction Networks tables tables single condition max_iter Max meanLR max_nodes Celltype experiment coords Cell Cell Interaction Plots colors Cell type colors rankings Ranking cells Genes loadings CCI values remove multiple times genes pca PCA results annot Annotation Results","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/add_node_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Adding genetype to the gene names to distinguish biological function — add_node_type","title":"Adding genetype to the gene names to distinguish biological function — add_node_type","text":"Adding genetype gene names distinguish biological function","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/add_node_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adding genetype to the gene names to distinguish biological function — add_node_type","text":"","code":"add_node_type(df)"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/add_node_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adding genetype to the gene names to distinguish biological function — add_node_type","text":"df dataframe interaction data","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/add_node_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adding genetype to the gene names to distinguish biological function — add_node_type","text":"df","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/analise_LR.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all LR Downstream analysis — analise_LR","title":"Run all LR Downstream analysis — analise_LR","text":"Core engine generate report. perform computation related CrossTalkeR","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/analise_LR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all LR Downstream analysis — analise_LR","text":"","code":"analise_LR(   lrpaths,   genes = NULL,   tf_genes = NULL,   out_path,   sep = \",\",   threshold = 0,   colors = NULL,   out_file = NULL,   output_fmt = \"html_document\",   sel_columns = c(\"source\", \"target\", \"gene_A\", \"gene_B\", \"type_gene_A\", \"type_gene_B\",     \"MeanLR\"),   org = \"hsa\",   comparison = NULL )"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/analise_LR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all LR Downstream analysis — analise_LR","text":"lrpaths Paths single condition LR data genes list genes considered sankey plots out_path output directory path sep character used csv threshold percentage edges pruned colors celltypes colorscheme out_file output file names output_fmt rmarkdown render output format parameter sel_columns columns data report decide report generated ","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/analise_LR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all LR Downstream analysis — analise_LR","text":"Rmarkdown report objects step","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/analise_LR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run all LR Downstream analysis — analise_LR","text":"","code":"paths <- c('CTR' = system.file(\"extdata\",                               \"CTR_LR.csv\",                               package = \"CrossTalkeR\"),           'EXP' = system.file(\"extdata\",                               \"EXP_LR.csv\",                               package = \"CrossTalkeR\")) output =  system.file(\"extdata\", package = \"CrossTalkeR\") genes <- c('TGFB1') data <- generate_report(lrpaths = paths,                        genes = genes,                        out_path = paste0(output,'/'),                        threshold = 0,                          out_file = \"report.html\") #> Create a Differential Table #> Calculating CCI Ranking #> EXP_x_CTR #>  #> Calculating GCI Ranking #> EXP_x_CTR #> Annotating the top Cell Genes #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> Reading KEGG annotation online: \"https://rest.kegg.jp/link/hsa/pathway\"... #> Reading KEGG annotation online: \"https://rest.kegg.jp/list/pathway/hsa\"... #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> Adding missing grouping variables: `cellpair` #> Adding missing grouping variables: `cellpair` #> Network Analysis Done #> Defining templates #> Generating Report #> Preparing Single Phenotype Report #> Warning: ggrepel: 34 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> Warning: ggrepel: 33 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> Preparing Comparative Phenotype Report #> Warning: ggrepel: 72 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> Report Done! #> Analysis Complete"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/comparative_med.html","id":null,"dir":"Reference","previous_headings":"","what":"Delta betweenness the most interactive gene (ligand or receptor) — comparative_med","title":"Delta betweenness the most interactive gene (ligand or receptor) — comparative_med","text":"Delta betweenness interactive gene (ligand receptor)","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/comparative_med.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delta betweenness the most interactive gene (ligand or receptor) — comparative_med","text":"","code":"comparative_med(rankings, slotname, graphname, curr.rkg)"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/comparative_med.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delta betweenness the most interactive gene (ligand or receptor) — comparative_med","text":"rankings tables lrobject slotname slot networks graphs_ggi gene cell interaction abs graphname graph comparison name curr.rkg ranking table","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/comparative_med.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delta betweenness the most interactive gene (ligand or receptor) — comparative_med","text":"list","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/comparative_pagerank.html","id":null,"dir":"Reference","previous_headings":"","what":"Ranking the most interactive gene (ligand or receptor) — comparative_pagerank","title":"Ranking the most interactive gene (ligand or receptor) — comparative_pagerank","text":"Ranking interactive gene (ligand receptor)","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/comparative_pagerank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ranking the most interactive gene (ligand or receptor) — comparative_pagerank","text":"","code":"comparative_pagerank(rankings, slotname, graphname, curr.rkg)"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/comparative_pagerank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ranking the most interactive gene (ligand or receptor) — comparative_pagerank","text":"rankings tables lrobject slotname slot networks graphs_ggi gene cell interaction abs graphname graph comparison name curr.rkg ranking table","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/comparative_pagerank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ranking the most interactive gene (ligand or receptor) — comparative_pagerank","text":"list","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/create_diff_table1.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the lrobject and generate the comparative tables — create_diff_table1","title":"Read the lrobject and generate the comparative tables — create_diff_table1","text":"Read lrobject generate comparative tables","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/create_diff_table1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the lrobject and generate the comparative tables — create_diff_table1","text":"","code":"create_diff_table1(data, out_path, comparison = NULL)"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/create_diff_table1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the lrobject and generate the comparative tables — create_diff_table1","text":"data LRObj single condition out_path output path","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/create_diff_table1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the lrobject and generate the comparative tables — create_diff_table1","text":"LRObject","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/enrich.html","id":null,"dir":"Reference","previous_headings":"","what":"Ranking the most interactive gene (ligand or receptor) — enrich","title":"Ranking the most interactive gene (ligand or receptor) — enrich","text":"Ranking interactive gene (ligand receptor)","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/enrich.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ranking the most interactive gene (ligand or receptor) — enrich","text":"","code":"enrich(list, name, db = org.Hs.eg.db, org = \"hsa\", univ = NULL)"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/enrich.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ranking the most interactive gene (ligand or receptor) — enrich","text":"list list genes name measure/subject name org annotation database default org.Hs.eg.db univ annotation universe","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/enrich.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ranking the most interactive gene (ligand or receptor) — enrich","text":"list","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/fisher_test_cci.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate Differences in the edge proportion — fisher_test_cci","title":"Evaluate Differences in the edge proportion — fisher_test_cci","text":"Evaluate Differences edge proportion","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/fisher_test_cci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate Differences in the edge proportion — fisher_test_cci","text":"","code":"fisher_test_cci(data, measure, out_path, comparison = NULL)"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/fisher_test_cci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate Differences in the edge proportion — fisher_test_cci","text":"data datafromlian measure intensity out_path save path","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/fisher_test_cci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Evaluate Differences in the edge proportion — fisher_test_cci","text":"tibble","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/generate_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all LR Downstream analysis — generate_report","title":"Run all LR Downstream analysis — generate_report","text":"function loads single conditions LR outputs return LR network based analysis. assumes table present following columns ('source','target','gene_A','gene_B','type_gene_A','type_gene_B','MeanLR') measure","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/generate_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all LR Downstream analysis — generate_report","text":"","code":"generate_report(   lrpaths,   genes = NULL,   tf_genes = NULL,   out_path,   sep = \",\",   threshold = 0,   colors = NULL,   out_file = NULL,   report = TRUE,   output_fmt = \"html_document\",   sel_columns = c(\"source\", \"target\", \"gene_A\", \"gene_B\", \"type_gene_A\", \"type_gene_B\",     \"MeanLR\"),   org = \"hsa\",   comparison = NULL )"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/generate_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all LR Downstream analysis — generate_report","text":"lrpaths Paths single condition LR data genes list genes considered sankey plots out_path output directory path sep character used csv threshold percentage edges pruned colors celltypes colorscheme out_file output file names report decide report generated output_fmt rmarkdown render output format parameter sel_columns columns data","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/generate_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all LR Downstream analysis — generate_report","text":"Rmarkdown report objects step","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/generate_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run all LR Downstream analysis — generate_report","text":"","code":"paths <- c('CTR' = system.file(\"extdata\",                               \"CTR_LR.csv\",                               package = \"CrossTalkeR\"),           'EXP' = system.file(\"extdata\",                               \"EXP_LR.csv\",                               package = \"CrossTalkeR\")) output =  system.file(\"extdata\", package = \"CrossTalkeR\") genes <- c('TGFB1') data <- generate_report(lrpaths = paths,                        genes = genes,                        out_path = paste0(output,'/'),                        threshold = 0,                          out_file = \"report.html\") #> Create a Differential Table #> Calculating CCI Ranking #> EXP_x_CTR #>  #> Calculating GCI Ranking #> EXP_x_CTR #> Annotating the top Cell Genes #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> Adding missing grouping variables: `cellpair` #> Adding missing grouping variables: `cellpair` #> Network Analysis Done #> Defining templates #> Generating Report #> Preparing Single Phenotype Report #> Warning: ggrepel: 34 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> Warning: ggrepel: 33 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> Preparing Comparative Phenotype Report #> Warning: ggrepel: 72 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> Report Done! #> Analysis Complete"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/kegg_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate Exclusive LR pairs (ligand or receptor) — kegg_annotation","title":"Annotate Exclusive LR pairs (ligand or receptor) — kegg_annotation","text":"Annotate Exclusive LR pairs (ligand receptor)","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/kegg_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate Exclusive LR pairs (ligand or receptor) — kegg_annotation","text":"","code":"kegg_annotation(   data,   slot,   out_path,   database = org.Hs.eg.db::org.Hs.eg.db,   org = \"hsa\",   n = 100 )"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/kegg_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate Exclusive LR pairs (ligand or receptor) — kegg_annotation","text":"data lrobject slot table fields out_path save path database annotation database org organism considered","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/make_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a report for given LRObj — make_report","title":"Generate a report for given LRObj — make_report","text":"Generate report given LRObj","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/make_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a report for given LRObj — make_report","text":"","code":"make_report(   genes = NULL,   tf_genes = NULL,   out_path,   threshold = 0,   colors = NULL,   out_file = NULL,   output_fmt = \"html_document\",   LRObj = NULL,   sel_columns = c(\"source\", \"target\", \"gene_A\", \"gene_B\", \"type_gene_A\", \"type_gene_B\",     \"MeanLR\") )"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/make_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a report for given LRObj — make_report","text":"genes list genes considered sankey plots out_path output directory path threshold percentage edges pruned colors celltypes colorscheme out_file output file names output_fmt rmarkdown render output format parameter LRObj rmarkdown render output format parameter sel_columns columns data","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/make_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a report for given LRObj — make_report","text":"Rmarkdown report objects step","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/make_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a report for given LRObj — make_report","text":"","code":"paths <- c('CTR' = system.file(\"extdata\",                               \"CTR_LR.csv\",                               package = \"CrossTalkeR\"),           'EXP' = system.file(\"extdata\",                               \"EXP_LR.csv\",                               package = \"CrossTalkeR\")) output =  system.file(\"extdata\", package = \"CrossTalkeR\") genes <- c('TGFB1') data <- generate_report(lrpaths = paths,                        genes = genes,                        out_path = paste0(output,'/'),                        threshold = 0,                          out_file = \"report.html\") #> Create a Differential Table #> Calculating CCI Ranking #> EXP_x_CTR #>  #> Calculating GCI Ranking #> EXP_x_CTR #> Annotating the top Cell Genes #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> Adding missing grouping variables: `cellpair` #> Adding missing grouping variables: `cellpair` #> Network Analysis Done #> Defining templates #> Generating Report #> Preparing Single Phenotype Report #> Warning: ggrepel: 34 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> Warning: ggrepel: 33 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> Preparing Comparative Phenotype Report #> Warning: ggrepel: 72 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> Report Done! #> Analysis Complete"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_cci.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Cell Cell Interaction — plot_cci","title":"Plot Cell Cell Interaction — plot_cci","text":"function CCI plot","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_cci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Cell Cell Interaction — plot_cci","text":"","code":"plot_cci(   graph,   colors,   plt_name,   coords,   emax = NULL,   leg = FALSE,   low = 25,   high = 75,   ignore_alpha = FALSE,   log = FALSE,   efactor = 8,   vfactor = 12,   vnames = T,   pg = NULL )"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_cci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Cell Cell Interaction — plot_cci","text":"graph Paths single condition LR data colors Cell type (Cluster) Colors plt_name Plot Name (Title) coords object coordinates emax Max MeanLR across inputs, defined, method going consider max find within sample leg Set color legend low Lower threshold: parameter low high defines edges high Higher threshould filtered. Edges within interval [low\\,high] filtered. ignore_alpha include transparency plot log logscale interactions efactor edge scale factor vfactor edge scale factor vnames remove vertex labels pg pagerank values","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_cci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Cell Cell Interaction — plot_cci","text":"R default plot","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_cci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Cell Cell Interaction — plot_cci","text":"","code":"paths <- c('CTR' = system.file(\"extdata\",                               \"CTR_LR.csv\",                               package = \"CrossTalkeR\"),           'EXP' = system.file(\"extdata\",                               \"EXP_LR.csv\",                               package = \"CrossTalkeR\"))  genes <- c('TGFB1')  output =  system.file(\"extdata\", package = \"CrossTalkeR\") data <- generate_report(paths,                        genes,                        out_path=paste0(output,'/'),                        threshold=0,                        out_file = 'vignettes_example.html',                        output_fmt = \"html_document\",                        report = FALSE) #> Create a Differential Table #> Calculating CCI Ranking #> EXP_x_CTR #>  #> Calculating GCI Ranking #> EXP_x_CTR #> Annotating the top Cell Genes #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> Adding missing grouping variables: `cellpair` #> Adding missing grouping variables: `cellpair` #> Network Analysis Done #> Analysis Complete plot_cci(graph = data@graphs$CTR,        colors = data@colors,        plt_name = 'Example 1',        coords = data@coords[igraph::V(data@graphs$CTR)$name,],        emax = NULL,        leg = FALSE,        low = 0,        high = 0,        ignore_alpha = FALSE,        log = FALSE,        efactor = 8,        vfactor = 12,        vnames = TRUE)"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_deregulated_pathways.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is a proxy to the PCA plot in comparative conditions — plot_deregulated_pathways","title":"This function is a proxy to the PCA plot in comparative conditions — plot_deregulated_pathways","text":"function proxy PCA plot comparative conditions","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_deregulated_pathways.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is a proxy to the PCA plot in comparative conditions — plot_deregulated_pathways","text":"","code":"plot_deregulated_pathways(data_object, name, title = NULL)"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_deregulated_pathways.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function is a proxy to the PCA plot in comparative conditions — plot_deregulated_pathways","text":"data_object LRobject data name name table","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_deregulated_pathways.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function is a proxy to the PCA plot in comparative conditions — plot_deregulated_pathways","text":"R default plot","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_graph_sankey_tf.html","id":null,"dir":"Reference","previous_headings":"","what":"This function creates a sankey plot for a selected gene including transcription factor interactions. — plot_graph_sankey_tf","title":"This function creates a sankey plot for a selected gene including transcription factor interactions. — plot_graph_sankey_tf","text":"function creates sankey plot selected gene including transcription factor interactions.","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_graph_sankey_tf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function creates a sankey plot for a selected gene including transcription factor interactions. — plot_graph_sankey_tf","text":"","code":"plot_graph_sankey_tf(   lrobj_tbl,   pagerank_table,   target = NULL,   cluster = NULL,   target_type = NULL,   plt_name = NULL,   threshold = 50,   save_path = NULL )"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_graph_sankey_tf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function creates a sankey plot for a selected gene including transcription factor interactions. — plot_graph_sankey_tf","text":"lrobj_tbl LRobject table data target gene cluster cluster target_type type target plt_name plot title threshold top_n n value","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_graph_sankey_tf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function creates a sankey plot for a selected gene including transcription factor interactions. — plot_graph_sankey_tf","text":"R default plot","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_graph_sankey_tf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function creates a sankey plot for a selected gene including transcription factor interactions. — plot_graph_sankey_tf","text":"","code":"paths <- c('CTR' = system.file(\"extdata\",                               \"CTR_LR.csv\",                               package = \"CrossTalkeR\"),           'EXP' = system.file(\"extdata\",                               \"EXP_LR.csv\",                               package = \"CrossTalkeR\")) output =  system.file(\"extdata\", package = \"CrossTalkeR\") genes <- c('TGFB1')  data <- generate_report(paths,                        genes,                        out_path=paste0(output,'/'),                        threshold=0,                        out_file = 'vignettes_example.html',                        output_fmt = \"html_document\",                        report = FALSE) #> Create a Differential Table #> Calculating CCI Ranking #> EXP_x_CTR #>  #> Calculating GCI Ranking #> EXP_x_CTR #> Annotating the top Cell Genes #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> Adding missing grouping variables: `cellpair` #> Adding missing grouping variables: `cellpair` #> Network Analysis Done #> Analysis Complete"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is a proxy to the PCA plot — plot_pca","title":"This function is a proxy to the PCA plot — plot_pca","text":"function proxy PCA plot","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is a proxy to the PCA plot — plot_pca","text":"","code":"plot_pca(lrobj_tblPCA, curr, dims = c(1, 2), ret = F, ggi = TRUE)"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function is a proxy to the PCA plot — plot_pca","text":"curr table entry dims PCA dims ret return plot ggi GGI mode lrobj_tbl LRobject table data","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function is a proxy to the PCA plot — plot_pca","text":"R default plot","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function is a proxy to the PCA plot — plot_pca","text":"","code":"paths <- c('CTR' = system.file(\"extdata\",                               \"CTR_LR.csv\",                               package = \"CrossTalkeR\"),           'EXP' = system.file(\"extdata\",                               \"EXP_LR.csv\",                               package = \"CrossTalkeR\")) output =  system.file(\"extdata\", package = \"CrossTalkeR\") genes <- c('TGFB1')  data <- generate_report(paths,                        genes,                        out_path=paste0(output,'/'),                        threshold=0,                        out_file = 'vignettes_example.html',                        output_fmt = \"html_document\",                        report = FALSE) #> Create a Differential Table #> Calculating CCI Ranking #> EXP_x_CTR #>  #> Calculating GCI Ranking #> EXP_x_CTR #> Annotating the top Cell Genes #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> Adding missing grouping variables: `cellpair` #> Adding missing grouping variables: `cellpair` #> Network Analysis Done #> Analysis Complete"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_pca_LR_comparative.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is a proxy to the PCA plot in comparative conditions — plot_pca_LR_comparative","title":"This function is a proxy to the PCA plot in comparative conditions — plot_pca_LR_comparative","text":"function proxy PCA plot comparative conditions","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_pca_LR_comparative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is a proxy to the PCA plot in comparative conditions — plot_pca_LR_comparative","text":"","code":"plot_pca_LR_comparative(   lrobj_tblPCA,   pca_table,   dims = c(1, 2),   ret = F,   ggi = TRUE,   include_tf = TRUE,   gene_types = \"all\" )"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_pca_LR_comparative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function is a proxy to the PCA plot in comparative conditions — plot_pca_LR_comparative","text":"lrobj_tblPCA LRobject table data pca_table table entry dims PCA dims ret return plot ggi GGI mode include_tf intracellular option gene_types filter option genes","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_pca_LR_comparative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function is a proxy to the PCA plot in comparative conditions — plot_pca_LR_comparative","text":"R default plot","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_pca_LR_comparative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function is a proxy to the PCA plot in comparative conditions — plot_pca_LR_comparative","text":"","code":"paths <- c('CTR' = system.file(\"extdata\",                               \"CTR_LR.csv\",                               package = \"CrossTalkeR\"),           'EXP' = system.file(\"extdata\",                               \"EXP_LR.csv\",                               package = \"CrossTalkeR\")) output =  system.file(\"extdata\", package = \"CrossTalkeR\") genes <- c('TGFB1')  data <- generate_report(paths,                        genes,                        out_path=paste0(output,'/'),                        threshold=0,                        out_file = 'vignettes_example.html',                        output_fmt = \"html_document\",                        report = FALSE) #> Create a Differential Table #> Calculating CCI Ranking #> EXP_x_CTR #>  #> Calculating GCI Ranking #> EXP_x_CTR #> Annotating the top Cell Genes #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> Adding missing grouping variables: `cellpair` #> Adding missing grouping variables: `cellpair` #> Network Analysis Done #> Analysis Complete"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_sankey.html","id":null,"dir":"Reference","previous_headings":"","what":"This function selected genes sankey plot — plot_sankey","title":"This function selected genes sankey plot — plot_sankey","text":"function selected genes sankey plot","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_sankey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function selected genes sankey plot — plot_sankey","text":"","code":"plot_sankey(   lrobj_tbl,   target = NULL,   ligand_cluster = NULL,   receptor_cluster = NULL,   plt_name = NULL,   threshold = 50,   tfflag = TRUE )"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_sankey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function selected genes sankey plot — plot_sankey","text":"lrobj_tbl LRobject table data target gene ligand_cluster Ligand Clusters receptor_cluster Receptor Clusters plt_name plot title threshold top_n n value","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_sankey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function selected genes sankey plot — plot_sankey","text":"R default plot","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/plot_sankey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function selected genes sankey plot — plot_sankey","text":"","code":"paths <- c('CTR' = system.file(\"extdata\",                               \"CTR_LR.csv\",                               package = \"CrossTalkeR\"),           'EXP' = system.file(\"extdata\",                               \"EXP_LR.csv\",                               package = \"CrossTalkeR\")) output =  system.file(\"extdata\", package = \"CrossTalkeR\") genes <- c('TGFB1')  data <- generate_report(paths,                        genes,                        out_path=paste0(output,'/'),                        threshold=0,                        out_file = 'vignettes_example.html',                        output_fmt = \"html_document\",                        report = FALSE) #> Create a Differential Table #> Calculating CCI Ranking #> EXP_x_CTR #>  #> Calculating GCI Ranking #> EXP_x_CTR #> Annotating the top Cell Genes #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> 'select()' returned 1:many mapping between keys and columns #> Adding missing grouping variables: `cellpair` #> Adding missing grouping variables: `cellpair` #> Network Analysis Done #> Analysis Complete"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/ranking.html","id":null,"dir":"Reference","previous_headings":"","what":"Ranking the most interactive gene (ligand or receptor) — ranking","title":"Ranking the most interactive gene (ligand or receptor) — ranking","text":"Ranking interactive gene (ligand receptor)","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/ranking.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ranking the most interactive gene (ligand or receptor) — ranking","text":"","code":"ranking(data, out_path, sel_columns, slot = \"graphs_ggi\")"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/ranking.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ranking the most interactive gene (ligand or receptor) — ranking","text":"data lrobject out_path save lrobject ranking sel_columns columns consider slot slot networks graphs_ggi gene cell interaction abs","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/ranking.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ranking the most interactive gene (ligand or receptor) — ranking","text":"list","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/ranking_net.html","id":null,"dir":"Reference","previous_headings":"","what":"Network Ranking method — ranking_net","title":"Network Ranking method — ranking_net","text":"Network Ranking method","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/ranking_net.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Network Ranking method — ranking_net","text":"","code":"ranking_net(graph, mode = TRUE)"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/ranking_net.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Network Ranking method — ranking_net","text":"graph lrobject mode TRUE comparive mode","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/ranking_net.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Network Ranking method — ranking_net","text":"list","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/read_lr_single_condition.html","id":null,"dir":"Reference","previous_headings":"","what":"Read single condition tables — read_lr_single_condition","title":"Read single condition tables — read_lr_single_condition","text":"function loads single conditions LR outputs use generate report data `s object assumes table presents following columns Ligand, Ligand.Cluster, Receptor,Receptor.Cluster MeanLR/another measure","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/read_lr_single_condition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read single condition tables — read_lr_single_condition","text":"","code":"read_lr_single_condition(   lrpaths,   sel_columns,   out_path = \"/tmp/\",   sep = \",\",   colors = NULL )"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/read_lr_single_condition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read single condition tables — read_lr_single_condition","text":"lrpaths Named vector lrpaths output out_path Path deposit results sep character used divide columns input file colors colorlist sel selected columns","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/read_lr_single_condition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read single condition tables — read_lr_single_condition","text":"LRObject","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/set_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"This function assigns coordinates in the sankey plots for the genes on the dataframe — set_coords","title":"This function assigns coordinates in the sankey plots for the genes on the dataframe — set_coords","text":"function assigns coordinates sankey plots genes dataframe","code":""},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/set_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function assigns coordinates in the sankey plots for the genes on the dataframe — set_coords","text":"","code":"set_coords(df, type)"},{"path":"https://github.com/CostaLab/CrossTalkeR/reference/set_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function assigns coordinates in the sankey plots for the genes on the dataframe — set_coords","text":"df dataframe genes contained sankey plot type string defining type genes inside dataframe (L, R TF)","code":""}]
