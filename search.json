[{"path":"/articles/CrossTalkeR.html","id":"version-info","dir":"Articles","previous_headings":"","what":"Version Info","title":"CrossTalkeR Cookbook","text":"R version: R version 4.5.1 (2025-06-13) Package version: 2.0.0","code":"suppressPackageStartupMessages({   require(CrossTalkeR) }) suppressPackageStartupMessages({   require(igraph) }) suppressPackageStartupMessages({   require(ggraph) }) suppressPackageStartupMessages({   require(ggplot2) })"},{"path":"/articles/CrossTalkeR.html","id":"generate-report-example","dir":"Articles","previous_headings":"","what":"Generate Report Example","title":"CrossTalkeR Cookbook","text":"vignette provide examples analyse cell interactions human myelofibrosis single cell RNA-seq dataset.","code":"data(CTR) data(EXP) paths <- list('CTR'=CTR,               'EXP'=EXP)  genes <- c('TGFB1|L') output <- system.file(\"extdata\", package = \"CrossTalkeR\") data <- generate_report(paths,                         genes,                         out_path=file.path(output),                         threshold=0,                         out_file = 'vignettes_example.html',                         output_fmt = \"html_document\",                         report = TRUE)"},{"path":[]},{"path":"/articles/CrossTalkeR.html","id":"cci","dir":"Articles","previous_headings":"Individual Visualization","what":"CCI","title":"CrossTalkeR Cookbook","text":"","code":"plot_cci(   graph = data@graphs$CTR,   colors = data@colors,   plt_name = \"Example 1\",   coords = data@coords[V(data@graphs$CTR)$name, ],   emax = NULL,   leg = FALSE,   low = 0,   high = 0,   ignore_alpha = FALSE,   log = FALSE,   efactor = 8,   vfactor = 12 )"},{"path":"/articles/CrossTalkeR.html","id":"sankey-plot","dir":"Articles","previous_headings":"Individual Visualization","what":"Sankey plot","title":"CrossTalkeR Cookbook","text":"","code":"plot_sankey(   lrobj_tbl = data@tables$EXP_x_CTR,   target = c(\"TGFB1|L\"),   ligand_cluster = NULL,   receptor_cluster = NULL,   plt_name = \"TGFB1\" )"},{"path":"/articles/CrossTalkeR.html","id":"report-samples","dir":"Articles","previous_headings":"Individual Visualization","what":"Report Samples","title":"CrossTalkeR Cookbook","text":"Single Comparative","code":""},{"path":[]},{"path":"/articles/CrossTalker_basicusage.html","id":"crosstalker---basic-execution","dir":"Articles","previous_headings":"","what":"CrossTalkeR - Basic Execution","title":"CrossTalkeR - Basic Usage","text":"like give short introduction basic usage CrossTalkeR.","code":""},{"path":"/articles/CrossTalker_basicusage.html","id":"basic-execution","dir":"Articles","previous_headings":"CrossTalkeR - Basic Execution","what":"Basic Execution","title":"CrossTalkeR - Basic Usage","text":"show basic way execute CrossTalkeR. need provide paths ligand-receptor interaction analysis results path save results : case tables already obtained inside R session, one can use following approach(also apply functions ).","code":"library(CrossTalkeR)  paths <- c(   \"Condition1\" = \"/path/to/condition1/LR-interactions.csv\",   \"Condition2\" = \"/path/to/condition2/LR-interactions.csv\" )  output_path <- \"/path/to/output/folder/\" data <- generate_report(paths,                 out_path=output,                 out_file = 'vignettes_example.html',                 output_fmt = \"html_document\",                 report = TRUE,                 org = \"hsa\",                  filtered_net=TRUE) obj1 <- \"a condition1 data frame object\" obj2 <- \"a condition2 data frame object\"  paths <- list('Condition1' = obj1,            'Condition2' = obj2)  output <- \"/path/to/output/folder/\" data <- generate_report(paths,                 out_path=output,                 out_file = 'vignettes_example.html',                 output_fmt = \"html_document\",                 report = TRUE,                 org = \"hsa\",                  filtered_net=TRUE)"},{"path":"/articles/CrossTalker_basicusage.html","id":"performing-only-the-analysis","dir":"Articles","previous_headings":"CrossTalkeR - Basic Execution","what":"Performing only the analysis","title":"CrossTalkeR - Basic Usage","text":"just perform analysis part CrossTalker, without generating report:","code":"library(CrossTalkeR)  paths <- c(   \"Condition1\" = \"/path/to/condition1/LR-interactions.csv\",   \"Condition2\" = \"/path/to/condition2/LR-interactions.csv\" )  output_path <- \"/path/to/output/folder/\" data <- analise_LR(paths,                 out_path=output,                 org = \"hsa\",                  filtered_net=TRUE)"},{"path":"/articles/CrossTalker_basicusage.html","id":"getting-report-from-an-existing-project","dir":"Articles","previous_headings":"CrossTalkeR - Basic Execution","what":"Getting Report from an existing project","title":"CrossTalkeR - Basic Usage","text":"addictional possibility generate reports existing CrossTalkeR objects. case out_path point folder ‘LR_data_final.Rds’ file.","code":"library(CrossTalkeR)  output <- \"/path/to/output/folder/\" data <- make_report(out_path=output,                 out_file = 'vignettes_example.html',                 output_fmt = \"html_document\",                 report = TRUE,                 org = \"hsa\",                  filtered_net=TRUE)"},{"path":"/articles/HumanFibrosis.html","id":"cell-cell-communication-analysis-of-human-myelofibrosis-scrna-seq-data-using-crosstalker","dir":"Articles","previous_headings":"","what":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","title":"CrossTalkeR Example - Human Myelofibrosis","text":", demonstrate usage CrossTalkeR case study Myelofibrosis scRNA-seq data set paper. predicted ligand-receptor interactions used tutorial provided within package. differ sightly results presented paper, since recomputed using cellphoneDB Method liana package consensus interaction database. scRNA-seq data contains two conditions: control (CTR_LR.csv) disease condition (EXP_LR.csv). first show run liana retrieve ligand receptor activities, execute CrossTalkeR finally go results, also provided inside resulting CrossTalkeR report.","code":""},{"path":"/articles/HumanFibrosis.html","id":"run-liana-for-ligand-receptor-interaction-prediction-in-r","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","what":"Run liana for Ligand-Receptor Interaction Prediction in R","title":"CrossTalkeR Example - Human Myelofibrosis","text":"prediction ligand-receptor interactions, using liana framework R. show usage liana example data using CellphoneDB method Consensus DB provided liana. First , laoding necessary libraries : assume necessary libraries already installed. can continue load Seurat object example. object provided package accessible object: can split object sample condition (meta data column “protocol”) run liana sub-objects, get condition specific ligand-receptor interactions. also filter reformat liana results step, resulting tables can directly used input CrossTalkeR analysis: general example recommend run liana R .","code":"library(Seurat) library(dplyr) library(liana) seurat_object <- readRDS(\"/path/to/Seurat/object.Rds\") outpath <- \"/path/to/save/results/\" pval_threshold <- 0.05  seurat_object_list <- SplitObject(seurat_object, split.by = \"protocol\") for (condition in names(seurat_object_list)) {   sub_object <- seurat_object_list[[condition]]    liana_results <- liana_wrap(sub_object,     method = \"cellphonedb\",     resource = c(\"Consensus\"),     expr_prop = 0.1   )    liana_results <- liana_results %>%     filter(pvalue < pval_threshold) %>%     select(source, target, ligand, receptor.complex, lr.mean) %>%     rename(gene_A = ligand, gene_B = receptor.complex, MeanLR = lr.mean)   liana_results$type_gene_A = 'Ligand'   liana_results$type_gene_B = 'Receptor'    write.csv(liana_results, paste0(outpath, condition, \"_LR.csv\")) }"},{"path":"/articles/HumanFibrosis.html","id":"running-crosstalker","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","what":"Running CrossTalkeR","title":"CrossTalkeR Example - Human Myelofibrosis","text":"First, need import CrossTalkeR package define named list either paths Ligand-Receptor interaction tables, directly dataframe objects condition interest. Please note possible run CrossTalkeR two conditions. load files within package. can define path like save results (output) run CrossTalkeR generate_report() function: Besides passing paths interaction tables output folder, also define: out_file - suffix result reports output_fmt - file type result reports report - boolean value reports created result successful execution, receive three seurat objects (LR_data.Rds, LR_data_step2.Rds LR_data_final.Rds), well two html-reports(SingleCondition.html ComparativeCondition.html). LR_data_final.Rds contains results produced CrossTalkeR two html-reports contain visualization results inside R object. possible load results CrossTalkeR analysis “LR_data_final.Rds” R-object produce plots separately. following going take look different results within two reports, step step.","code":"library(CrossTalkeR) library(igraph) library(stringr)  data(CTR) data(EXP) paths <- list(\"CTR\" = CTR,               \"EXP\" = EXP)  output <- system.file(\"extdata\", package = \"CrossTalkeR\") ctkroutput <- generate_report(paths,                               out_path = paste0(output, \"/\"),                               out_file = \"vignettes_example.html\",                               output_fmt = \"html_document\",                               report = FALSE,                               filtered_net = TRUE)"},{"path":"/articles/HumanFibrosis.html","id":"single-condition-report","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","what":"Single Condition Report","title":"CrossTalkeR Example - Human Myelofibrosis","text":"first report contains results analysed condition considered separately. case section plot CTR condition (CTR) disease condition (EXP). two main sections report. first one deals cell-cell-interactions second cell-gene-interactions, means analysis ligand receptor gene level.","code":""},{"path":"/articles/HumanFibrosis.html","id":"cell-cell-interaction-analysis-results","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR > Single Condition Report","what":"Cell-Cell-Interaction Analysis Results","title":"CrossTalkeR Example - Human Myelofibrosis","text":"cell-cell-interaction (CCI) graph plots focus interactions different cell types within data. focus three measures inside plot: Percentage interactions indicated opacity arrows Edge weight (sum single L-R interaction scores cell type pairs) indicated edge color Pagerank (Node importance) indicated node size loading result data “LR_data_final.Rds”, can plot cell-cell interactions plot_cci() function. show plot analysed condition:  CTR plot, can see high proportion interactions involve MSCs communicating , well MSCs Myeloid cells interacting . interactions also higher weight, indicated edge color. important nodes according Pagerank MSC, Myeloid, Megakaryocyte nodes. analyzing plot EXP condition, observe high proportion interactions involving self-communicating MSCs, one significant nodes pagerank remains MSC node. , MSCs predicted communicate Megakaryocytes Fibroblasts Myeloid cells. effectively compare two conditions, recommend utilizing comparative report results.","code":"data(ctkroutput) data <- ctkroutput  p1 <- plot_cci(graph = data@graphs$CTR,         colors = data@colors,         plt_name = 'Control',         coords = data@coords[V(data@graphs$CTR)$name,],         emax = NULL,         leg = FALSE,         low = 0,         high = 0,         ignore_alpha = FALSE,         log = FALSE,         efactor = 8,         vfactor = 12,         pg = data@rankings[[\"CTR\"]]$Pagerank)  p2 <- plot_cci(graph = data@graphs$EXP,         colors = data@colors,         plt_name = 'Disease',         coords = data@coords[V(data@graphs$EXP)$name,],         emax = NULL,         leg = FALSE,         low = 0,         high = 0,         ignore_alpha = FALSE,         log = FALSE,         efactor = 8,         vfactor = 12,         pg = data@rankings[[\"EXP\"]]$Pagerank)  print(p1+p2)"},{"path":"/articles/HumanFibrosis.html","id":"analysis-on-the-gene-cell-interaction-level","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR > Single Condition Report","what":"Analysis on the Gene-Cell Interaction Level","title":"CrossTalkeR Example - Human Myelofibrosis","text":"provide several different possibilities analyse ligand-receptor interactions gene level. CrossTalkeR, topological network measures calculated node(gene) build networks. measures include Influencer (depending outgoing edges), Listener(depending incoming edges), Mediator (depending outgoing incoming edges), Pagerank (overall importance) rankings. ligand receptors can ranked measures can identify possibly relevant genes considering top genes rankings. report provide interactive table rankings gene network. example top 10 genes Pagerank ranking preset conditions form Barplots:  possible perform analysis gene-gene-level regarding topological measures, focus result condition comparison results described next section.","code":"rankings_table <- data@rankings$CTR_ggi %>%   arrange(Pagerank) rankings_table <- tail(rankings_table, n=10) signal <- ifelse(rankings_table$Pagerank < 0, 'negative', 'positive') p1 <- ggplot(rankings_table, aes(x = Pagerank, y = reorder(nodes, Pagerank), fill = signal)) +         geom_bar(stat = \"identity\") +         scale_fill_manual(values = c(Blue2DarkOrange18Steps[14])) +         theme_minimal() +         ggtitle(\"Top Listener in Control Condition\")   rankings_table <- data@rankings$EXP_ggi %>%   arrange(Pagerank) rankings_table <- tail(rankings_table, n=10) signal <- ifelse(rankings_table$Pagerank < 0, 'negative', 'positive') p2 <- ggplot(rankings_table, aes(x = Pagerank, y = reorder(nodes, Pagerank), fill = signal)) +         scale_fill_manual(values = c(Blue2DarkOrange18Steps[14])) +         geom_bar(stat = \"identity\") +         theme_minimal() +         ggtitle(\"Top Listener in Disease Condition\") print(p1+p2)"},{"path":"/articles/HumanFibrosis.html","id":"compared-condition-results","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","what":"Compared Condition Results","title":"CrossTalkeR Example - Human Myelofibrosis","text":"CrossTalkeR analyzes conditions individually also calculates differences cell-cell interactions conditions. results analyses presented comparative report. example compare EXP CTR condition.","code":""},{"path":"/articles/HumanFibrosis.html","id":"cell-cell-interaction-analysis-results-1","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR > Compared Condition Results","what":"Cell-Cell-Interaction analysis results","title":"CrossTalkeR Example - Human Myelofibrosis","text":"single condition results, first part results deal cell-cell interactions. show CCI graph plot, now compared conditions: main difference previous CCI graph plots edge weights can now positive also negative, well Pagerank values nodes. Positive values mean interactions cell types higher activity/importance EXP condition, negative values indicate lower activity/importannce EXP condition (higher CTR). can see CCI plot , equally positive negative edge weights present. edge weights MSCs Megakaryocytes positive directions Disease condition. Thus, can conclude communication stronger EXP example. contrast, edge weights MSC Myeloid nodes negative edge weights, meaning communication lower EXP condition. , self communication edge MSC node strong negative weight also pagerank small (indicated small node size). indicates MSCs important CCIs CTR condition.  CrossTalkeR offers refined CCI graph employing Fisher’s exact test filter network based interaction proportions. small example, interactions Fibroblasts Neural cells removed network applying tests results. described interactions MSCs, Megakaryocytes Myeloid cells still retained, indicating importance communication. Since example data small, going continue using unfiltered network following steps. filtered CCI graph mostly helpful large communication networks. Since created CCI network can also analyze based topological properties identify possible biologically relevant processes. purpose, topological measures can used present single condition results gene-cell interactions analysis (Influencer, Listener, Mediator, Pagerank). , can look rankings individually form bar plots. example Pagerank cell types network:  comparison, Megakaryocytes highest pagerank, suggest high importance network EXP condition. negative direction, Myeloid cells lowest Pagerank. suggest higher importance CTR condition. considering now also topological measures, can assign/find communication properties cell types:    Including Influencer, Listener Mediator barplots reveals Megakaryocytes highest PageRank, Influencer, Listener scores, indicating engage significant interactions EXP condition. However, Mediator score negative, suggesting stronger mediating role CTR condition. contrast, Myeloid cells show high negative scores across metrics except Influencer score, emphasizing importance CTR condition. findings highlight differing roles cell types EXP versus normal states.","code":"plot_cci(graph = data@graphs$EXP_x_CTR,         colors = data@colors,         plt_name = 'Disease vs Control',         coords = data@coords[V(data@graphs$EXP_x_CTR)$name,],         emax = NULL,         leg = FALSE,         low = 0,         high = 0,         ignore_alpha = FALSE,         log = FALSE,         efactor = 8,         vfactor = 12, pg = data@rankings[[\"EXP_x_CTR\"]]$Pagerank) EnhancedVolcano(data@stats$EXP_x_CTR, lab=data@stats$EXP_x_CTR$columns_name,x='lodds',y='p',pCutoff=0.05) plot_cci(graph = data@graphs$EXP_x_CTR_filtered,         colors = data@colors,         plt_name = 'Disease vs Control Fisher Test Filtered',         coords = data@coords[V(data@graphs$EXP_x_CTR_filtered)$name,],         emax = NULL,         leg = FALSE,         low = 0,         high = 0,         ignore_alpha = FALSE,         log = FALSE,         efactor = 8,         vfactor = 12, pg = data@rankings[[\"EXP_x_CTR_filtered\"]]$Pagerank) plot_bar_rankings(data, \"EXP_x_CTR\", \"Pagerank\", type = NULL, filter_sign = NULL) plot_bar_rankings(data, \"EXP_x_CTR\", \"Influencer\", type = NULL, filter_sign = NULL) plot_bar_rankings(data, \"EXP_x_CTR\", \"Listener\", type = NULL, filter_sign = NULL) plot_bar_rankings(data, \"EXP_x_CTR\", \"Mediator\", type = NULL, filter_sign = NULL)"},{"path":"/articles/HumanFibrosis.html","id":"cell-gene-interaction-analysis-results","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR > Compared Condition Results","what":"Cell-Gene-Interaction Analysis Results","title":"CrossTalkeR Example - Human Myelofibrosis","text":"second part report deals interactions gene level. , procedure similar one described last section cell-cell interactions analysis performed single conditions. First , can look results topological rankings form bar plots, using example pagerank:  plot highlights ligand receptor genes play significant roles different conditions. Notably, top genes positive negative directions predominantly receptor genes. Specifically, majority positively scored genes receptor genes Megakaryocytes, top negatively scored genes associated Myeloid cells. Among key receptors, ITGB1 upregulated Megakaryocytes, ITGA1 downregulated MSCs. Additionally, score CXCR4 also elevated Megakaryocytes. insights, encourage examining rankings. Given focusing pairwise interactions, analysis concentrate Influencer Listener rankings:   top Influencer EXP condition identified TGFB1 Megakaryocytes. Also COL1A1 COL1A2 MSCs rank high positive side. CXCL12 MSCs example negative Influencer ranking. Listener category, integrin receptors dominate, also receptors CXCR4 LRP1 ranking high/low.","code":"plot_bar_rankings(data, \"EXP_x_CTR_ggi\", \"Pagerank\", type = NULL, filter_sign = NULL, mode = \"cgi\") plot_bar_rankings(data, \"EXP_x_CTR_ggi\", \"Influencer\", type = \"L\", filter_sign = NULL, mode = \"cgi\") plot_bar_rankings(data, \"EXP_x_CTR_ggi\", \"Listener\", type = \"R\", filter_sign = NULL, mode = \"cgi\")"},{"path":"/articles/HumanFibrosis.html","id":"follow-up-analysis","dir":"Articles","previous_headings":"","what":"Follow-up Analysis","title":"CrossTalkeR Example - Human Myelofibrosis","text":"Since got first impression data previous results, can deepen analysis. example, TGFB1 Megakaryocytes, ITGB1 Megakaryocytes, Fibroblasts MSCs CXCR4 Megakaryocytes Myeloid cells interesting genes. CrossTalkeR, can look even closely interactions involving genes using Sankey plots. two ways . First, can regenerate report , time passing list genes interest: second option plot Sankey plots genes interests, without redoing report:  Sankey plot, interactions involving TGFB1 ligand gene shown, high score. number actual interactions can controlled threshold parameter. example 50 interactions selected. Since entered one target gene without information, can now also see interactions originating different cell types, Fibroblasts, Megakaryocytes MSCs. Furthermore, now list receptors associated cell types TGFB1 ligand can possibly interact. list also includes receptor ITGB1 Megakaryocytes, also gene interest. interaction TGFB1 ITGB1 positive score, means enriched EXP condition. third gene interest receptor gene CXCR4 high importance Megakaryocytes EXP condition Myeloid cells CTR condition. want focus CXCR4 Megakaryocytes Myeloid cells, can define receptor_cluster value running Sankey plot function. Also, number interactions included reduced setting threshold parameter 15.  Sankey plot confirms LR Score indicates higher interaction CXCR4 Megakaryocytes EXP condition Myeloid cells CTR condition. Additionally, highlights previously occuring ligand receptors, including TGFB ligand Megakaryocytes CXCR4 Megakaryocytes CXCL12 MSCs CXCR4 Megakaryocytes Myeloid cells. Another interesting target described Leimkühler et. al. 2021 ligand S100A8. study also shows S100A8 targeted MPN phenotype ameliorated","code":"genes_of_interest <- c('TGFB1|L',                        'ITGB1|R',                        'CXCR4|R')  data <- make_report(out_path = output_path,                     genes = genes_of_interest,                     out_file = 'vignettes_example.html',                     output_fmt = \"html_document\",                     report = TRUE,                     org = \"hsa\") plot_sankey(data@tables$EXP_x_CTR,             target = \"TGFB1|L\",             ligand_cluster = NULL,             receptor_cluster = NULL,             plt_name = \"TGFB1 ligand gene interactions EXP vs CTR\",             threshold = 50, tfflag = FALSE) plot_sankey(data@tables$EXP_x_CTR,             target = \"CXCR4|R\",             ligand_cluster = NULL,             receptor_cluster = c(\"Megakaryocyte\", \"Myeloid\"),             plt_name = \"Megakaryocyte and  Myeloid CXCR4 receptor gene interaction EXP vs CTR\",             threshold = 15, tfflag = FALSE) plot_sankey(data@tables$EXP_x_CTR,             target = \"S100A8|L\",             ligand_cluster = \"Myeloid\",             receptor_cluster = NULL,             plt_name = \"Myeloid S100A8 receptor gene interaction EXP vs CTR\",             threshold = 15, tfflag = FALSE)"},{"path":"/articles/HumanFibrosis.html","id":"report-samples","dir":"Articles","previous_headings":"","what":"Report Samples","title":"CrossTalkeR Example - Human Myelofibrosis","text":"Single Condition Report Comparative Condition Report","code":""},{"path":"/articles/HumanFibrosis.html","id":"further-tutorials","dir":"Articles","previous_headings":"","what":"Further Tutorials","title":"CrossTalkeR Example - Human Myelofibrosis","text":"want learn infer ligand receptor interactions liana use CrossTalkeR, check tutorial: Run liana.","code":""},{"path":[]},{"path":"/articles/Install.html","id":"install","dir":"Articles","previous_headings":"CrossTalkeR - Installation","what":"Install","title":"CrossTalkeR - Installation","text":"can install load CrossTalkeR package simple commands : following possible system dependencies:","code":"install.packages(\"devtools\") devtools::install_github(\"https://github.com/CostaLab/CrossTalkeR\", build_vignettes = TRUE) require(CrossTalkeR) libudunits2-dev libgdal-dev gdal-bin libproj-dev proj-data proj-bin libgeos-dev"},{"path":"/articles/LR2TF_analysis.html","id":"intracellular-communication-analysis-on-human-myelofibrosis-scrna-seq-data-using-the-lr2tf-package-and-crosstalker","dir":"Articles","previous_headings":"","what":"Intracellular Communication Analysis on Human Myelofibrosis scRNA-seq Data Using the LR2TF Package and CrossTalkeR","title":"Intracellular Communication Analysis","text":"guide usage LR2TF package infer TF activities scRNA-seq data. transcription factor activities estimated using decoupleR tool. Using DoRothEA regulon version decoupleR post-translational interactions Omnipath database[2,3,4], connections made transcription factors ligands receptors. results can combined ligand-receptor interactions analyzed using CrossTalkeR (https://github.com/CostaLab/CrossTalkeR/) [5].","code":""},{"path":"/articles/LR2TF_analysis.html","id":"installation","dir":"Articles","previous_headings":"Intracellular Communication Analysis on Human Myelofibrosis scRNA-seq Data Using the LR2TF Package and CrossTalkeR","what":"Installation","title":"Intracellular Communication Analysis","text":"package can installed directly github:    ","code":"library(devtools) install_github(\"CostaLab/LR2TF\")  library(remotes) install_github(\"CostaLab/LR2TF\", build_vignettes = TRUE)"},{"path":"/articles/LR2TF_analysis.html","id":"transcription-factor-activity-predictions-using-decoupler-in-python","dir":"Articles","previous_headings":"Intracellular Communication Analysis on Human Myelofibrosis scRNA-seq Data Using the LR2TF Package and CrossTalkeR","what":"Transcription Factor Activity Predictions Using decoupleR in Python","title":"Intracellular Communication Analysis","text":"transcription factor activity predictions recommend using decoupleR package python version. provides better performance, especially larger data sets. perform predictions decoupleR, need AnnData (.h5ad) file. scRNA-seq data saved Seurat object (.Rds file), can converted AnnData format using sceasy package function provide: file “anndata_object.h5ad” saved user defined path used perform predictions. Beside scRNA-seq data file, also need define regulon database form csv file coloumns “source”, “target” “weight”. Within package provide dorothea databases human mouse, downloaded decoupleR package. files also contain column “confidence” (levels D) information well described transcription factor target gene interaction different resources. recommend using confidence levels B. Now possible run transcription factor activity prediction decoupleR. using Univariate Linear Model (ulm) approach recommended authors:","code":"library(LR2TF) library(Seurat)  # load own dataset: seurat_object <- readRDS(\"/path/to/seurat_object.Rds\")  # test dataset from package: data(bone_marrow_stromal_cell_example, package = \"LR2TF\") seurat_object <- bone_marrow_stromal_cell_example  LR2TF::convert_seurat_to_anndata(seurat_object, \"/path/to/save/AnnData/object/\") regulon <- read.csv(system.file(\"regulons\", \"human_dorothea_reg.csv\", package = \"LR2TF\"), row.names = 1) filtered_regulon <- regulon[regulon$confidence %in% c(\"A\", \"B\"), ] write.csv(\"/path/to/save/filterd_regulon.csv\") import scanpy as sc import decoupler as dc import pandas as pd  ann_data = sc.read_h5ad(\"/path/to/AnnData/object/anndata_object.h5ad\") reg = pd.read_csv(\"/path/to/filterd_regulon.csv\")  dc.run_ulm(mat=ann_data, net=reg, source='source', target='target', weight='weight', verbose=True, use_raw=False)  estimates = ann_data.obsm['ulm_estimate'] estimates.to_csv(\"/path/to/save/decoupler_results.csv\")"},{"path":"/articles/LR2TF_analysis.html","id":"using-the-lr2tf-package","dir":"Articles","previous_headings":"Intracellular Communication Analysis on Human Myelofibrosis scRNA-seq Data Using the LR2TF Package and CrossTalkeR","what":"Using the LR2TF package","title":"Intracellular Communication Analysis","text":"Now, transcription factor activity matrix, can continue analysis LR2TF package. case use test data example. First , necessary define following parameters form list: defining necessary parameter transcription factor activity can performed calling: “results” object contains results performed analyses, consisting multiple tables inside object: tf_activities_condition: Tables condition significant transcription factors compared condition tf_activities_cluster: Tables cluster specific transcription factors conditions data average_gene_expression: Matrices condition average gene expressions regulon: Regulon used analysis specified user CTR_input_condition: condition table receptor-transcription factor transcription factor-ligand interactions based condition specific transcription factors (input CrossTalker) CTR_input_cluster: condition table receptor-transcription factor transcription factor-ligand interactions based cluster specific transcription factors (input CrossTalker) intracellular_network_condition: condition table receptor-transcription factor transcription factor-target gene interactions based condition specific transcription factors intracellular_network_cluster: condition table receptor-transcription factor transcription factor-target gene interactions based cluster specific transcription factors (Note special characters might exchanged underscores, cause problems naming tables; eg PMF,MF2 -> PMF_MF2)","code":"parameters <- list(   \"out_path\" = \"/path/to/save/results\",   reg = \"/path/to/filterd_regulon.csv\",   \"organism\" = \"human\",   \"celltype\" = \"new_annotation\", # name of the meta data field defining cell identities   \"condition\" = \"protocol\", # name of the meta data field defining conditions   \"comparison_list\" = list(c(\"PMF,MF2\", \"control\")), # list of condition comparison to consider   \"logfc\" = 0.5,   \"pval\" = 0.05, # thresholds for logfc and pval used in differential transcription factor analysis   \"num_cell_filter\" = 0 ) # define the minimum number of cells per cluster to perform the analysis on results <- LR2TF::tf_activity_analysis(   seuratobject = seurat_object,   tf_activities = \"/path/to/decoupler_results.csv\",   arguments_list = parameters )"},{"path":"/articles/LR2TF_analysis.html","id":"transcription-factor-activity-analysis-plots","dir":"Articles","previous_headings":"Intracellular Communication Analysis on Human Myelofibrosis scRNA-seq Data Using the LR2TF Package and CrossTalkeR > Using the LR2TF package","what":"Transcription Factor Activity Analysis Plots","title":"Intracellular Communication Analysis","text":"already outlined result object description, two different analysis approaches used identify predicted TF activities significant. first approach focuses comparison different sample conditions (, control vs. fibrosis). analysis, large heatmap generated includes TFs showing significant differential activity conditions least one cell clusters. Heatmap showing TFs show significant differences activities PMF_MF2 control condition. significance level given asterisk symbol: * p-value < 0.05, ** p-value < 0.01, *** p-value < 0.001.   second approach focuses identifying cluster-specific TFs within different conditions separately. addition similar heatmap condition comparison, heatmaps provided show variable TFs among cell clusters. Heatmap showing TFs highly variable activity clusters control condition. Heatmap showing TFs highly variable activity clusters PMF_MF2 condition.  ","code":""},{"path":"/articles/LR2TF_analysis.html","id":"running-crosstalker-with-tf-predictions","dir":"Articles","previous_headings":"Intracellular Communication Analysis on Human Myelofibrosis scRNA-seq Data Using the LR2TF Package and CrossTalkeR","what":"Running CrossTalkeR with TF Predictions","title":"Intracellular Communication Analysis","text":"last step combine previous results ligand receptor interaction analyses (e.g. CellPhoneDB) transcription factor results. (case test data ligand-receptor interactions provided within CrossTalkeR package. Note results include receptor complexes.) Now one input table condition interest, can used run CrossTalkeR:","code":"# First possibility: Read the csv files with LR interaction results and then combine them with the TF interaction results table_ctr <- read.csv(\"/path/to/control_lr_results.csv\", row.names = 1) table_exp <- read.csv(\"/path/to/PMF,MF2_lr_results.csv\", row.names = 1)  ctr_inptu <- LR2TF::combine_LR_and_TF_complexes(results@CTR_input_condition[[\"control\"]], table_ctr, parameters$out_path, \"control\") exp_input <- LR2TF::combine_LR_and_TF_complexes(results@CTR_input_condition[[\"PMF_MF2\"]], table_exp, parameters$out_path, \"PMF_MF2\")  # Second possibility: Directly pass the path to the LR interaction csv files to combine them with the TF interaction results ctr_file <- \"/path/to/control_lr_results.csv\" exp_file <- \"/path/to/PMF,MF2_lr_results.csv\"  ctr_inptu <- LR2TF::combine_LR_and_TF_complexes(results@CTR_input_condition[[\"control\"]], ctr_file, parameters$out_path, \"control\") exp_input <- LR2TF::combine_LR_and_TF_complexes(results@CTR_input_condition[[\"PMF_MF2\"]], exp_file, parameters$out_path, \"PMF_MF2\") library(CrossTalkeR) library(igraph) library(stringr)  paths <- c(   \"control\" = ctr_inptu,   \"PMF_MF2\" = exp_input )  output_path <- (\"/path/to/save/folder\") data <- generate_report(paths,   out_path = paste0(output, \"/\"),   out_file = \"HumanMyfib_TF_example.html\",   output_fmt = \"html_document\",   report = TRUE,   comparison = list(c(\"PMF_MF2\", \"control\")) )"},{"path":"/articles/LR2TF_analysis.html","id":"crosstalker-results","dir":"Articles","previous_headings":"Intracellular Communication Analysis on Human Myelofibrosis scRNA-seq Data Using the LR2TF Package and CrossTalkeR","what":"CrossTalkeR Results","title":"Intracellular Communication Analysis","text":"Incorporating TFs CrossTalkeR analysis introduces greater complexity network, particularly CGI level. Since CCI component emphasizes intercellular communication, TFs — contribute potential intracellular interactions — excluded aspect analysis, leaving results unchanged. Therefore, segment example concentrates modifications observed CGI component. Furthermore, utilize results comparison report condition-specific TFs used CrossTalkeR analysis. first example compare PageRank results run LR genes current added TFs. barplot top PageRank scored genes can generated like : Now can compare results CrossTalkeR LR (left) results TFs (right):     can observed inclusion TFs increases variability gene types coming top genes. ITGB1 receptor megakaryocytes remains among top genes several TFs also present results; example, STAT5B megakaryocytes ATF4 Fibroblasts among upregulated genes, TFAP2A MSCs among regulated genes. can analyze PageRank also examine top genes rankings. purpose, previously used method call can adjusted:        integrating intracellular signaling analysis, can now trace predicted signaling pathways within cells determine whether incoming signals induce responses specific cell types , conversely, identify upstream regulators active ligand. example, can select top influencer ligand, TGFB1 megakaryocytes, top listener barplot. begin generating standard LR Sankey plot visualize intercellular interactions involving TGFB1:    Now, introducing new graph sankey plot, shows upstream signaling TGFB1 megakaryocytes:      plot, focus PageRank included genes. node’s weight represents corresponding PageRank value gene, edges weighted PageRank values receptors ligands involved interactions. example, multiple TFs predicted regulate TGFB1 gene shown active. Notably, one TFs, MYC, identified top mediator TF. MYC previously described profibrotic role [6], role megakaryocytes yet studied, suggesting potential opportunities investigation. follow connecting TGFB1 upstream signals, focus now top listener receptor, ITGB1, predicted upstream MYC megakaryocytes. Building , examine top incoming signals cell types originate, targeting ITGB1 megakaryocytes:    put together sepparated signalig plots, can receive signaling chain megakaryocyte cells (image automatically generated):   ","code":"library(CrossTalkeR) library(igraph) library(stringr)  plot_bar_rankings_cgi(data, \"PMF_MF2_x_control_ggi\", ranking = \"Pagerank\") library(CrossTalkeR) library(igraph) library(stringr)  plot_bar_rankings_cgi(data, \"PMF_MF2_x_control_ggi\", ranking = \"Influencer\", type = \"L\")  plot_bar_rankings_cgi(data, \"PMF_MF2_x_control_ggi\", ranking = \"Listener\", type = \"R\")  plot_bar_rankings_cgi(data, \"PMF_MF2_x_control_ggi\", ranking = \"Mediator\", type = \"TF\") library(CrossTalkeR) library(igraph) library(stringr)  plot_sankey(data@tables$PMF_MF2_x_control,     target = \"TGFB1|L\",     ligand_cluster = \"Megakaryocyte\",     receptor_cluster = NULL,     plt_name = \"TGFB1 Megakaryocyte Signaling PMF_MF2 vs control\",     threshold = 50, tfflag = FALSE ) library(CrossTalkeR) library(igraph) library(stringr)  pagerank_table = data@rankings$PMF_MF2_x_control_ggi %>%   select(c(\"nodes\", \"Pagerank\")) pagerank_table = as.data.frame(pagerank_table) rownames(pagerank_table) = pagerank_table$nodes  plot_graph_sankey_tf(data@tables$PMF_MF2_x_control,     pagerank_table,     target = \"TGFB1|L\",     cluster = \"Megakaryocyte\",     target_type = \"Ligand\",     plt_name = \"Signaling Upstream TGFB1 in Megakaryocytes\") library(CrossTalkeR) library(igraph) library(stringr)  plot_sankey(data@tables$PMF_MF2_x_control,     target = \"ITGB1|R\",     ligand_cluster = NULL,     receptor_cluster = \"Megakaryocyte\",     plt_name = \"ITGB1 Megakaryocyte Signaling PMF_MF2 vs control\",     threshold = 50, tfflag = FALSE )"},{"path":"/articles/LR2TF_analysis.html","id":"references","dir":"Articles","previous_headings":"Intracellular Communication Analysis on Human Myelofibrosis scRNA-seq Data Using the LR2TF Package and CrossTalkeR","what":"References","title":"Intracellular Communication Analysis","text":"[1] Garcia-Alonso L, Holland CH, Ibrahim MM, Turei D, Saez-Rodriguez J. “Benchmark integration resources estimation human transcription factor activities.” Genome Research. 2019. DOI: 10.1101/gr.240663.118. [2] Valdeolivas, D Turei, Gabor (2019) “OmnipathR: client OmniPath web service.” Bioconductor Package [3] D Turei, T Korcsmaros J Saez-Rodriguez (2016) OmniPath: guidelines gateway literature-curated signaling pathway resources. Nature Methods 13 (12); PMID: 27898060 [4] D Turei, Valdeolivas, L Gul, N Palacio-Escat, M Klein, O Ivanova, M Olbei, Gabor, F Theis, D Modos, T Korcsmaros J Saez-Rodriguez (2021) Integrated intra- intercellular signaling knowledge multicellular omics analysis. Molecular Systems Biology 17: e9923; DOI: 10.15252/msb.20209923 [5] James S Nagai, Nils B Leimkühler, Michael T Schaub, Rebekka K Schneider, Ivan G Costa, CrossTalkeR: analysis visualization ligand–receptorne tworks, Bioinformatics, Volume 37, Issue 22, 15 November 2021, Pages 4263–4265, https://doi.org/10.1093/bioinformatics/btab370 [6] Zacarías-Fluck MF, Soucek L, Whitfield JR. MYC: cancer. Front Cell Dev Biol. 2024 Mar 6;12:1342872. DOI: 10.3389/fcell.2024.1342872.","code":""},{"path":"/articles/MyocardialInfarction.html","id":"cell-cell-communication-analysis-of-human-myelofibrosis-scrna-seq-data-using-crosstalker","dir":"Articles","previous_headings":"","what":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","title":"CrossTalkeR Example - Human Myocardial Infarction","text":", demonstrate usage CrossTalkeR case study human myocardian infarction snRNA-seq data Nature paper “Spatial multi-omic map human myocardial infarction” (Kuppe et al.). Aim study build high-resolution map human cardiac remodelling myocardial infarction provide better understanding remodelling processes. focusing conditions “myogenic” (control condition) “ischemic” (disease condition) go CrossTalkeR results step step. original paper already contains CrossTalkeR results later part tutorial replicate results.","code":""},{"path":"/articles/MyocardialInfarction.html","id":"data-availability","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","what":"Data Availability","title":"CrossTalkeR Example - Human Myocardial Infarction","text":"data used tutorial available following Zenodo repository: ISMB/ECCB25 - VT3 tutorial data. using Seurat object 2306_scRNAseq_MOIZ.rds contains snRNA-seq data human myocardian infarction study. object already preprocessed contains necessary metadata CrossTalkeR analysis. Since data set includes conditions intend use python version LIANA+, first filter object include conditions “myogenic” “ischemic” convert Seurat object AnnData object. conversion use MuDataSeurat package, allows us convert Seurat objects directly AnnData objects.","code":"# Loading the necessary libraries library(Seurat) library(MuDataSeurat)  # Reading the Seurat object # Note: Please adjust the path to the Seurat object accordingly complete_heart_data <- readRDS(\"2306_scRNAseq_MOIZ.rds\")  # Filtering the Seurat object to only include the conditions \"myogenic\" and \"ischemic\" filtered_heart_data <- subset(   complete_heart_data,   subset = sampleType %in% c(\"myogenic\", \"ischemic\") ) # Saving the filtered Seurat object saveRDS(filtered_heart_data, \"heart_data_object.rds\")  # Converting the Seurat object to an AnnData object MuDataSeurat::WriteH5AD(filtered_heart_data, \"heart_data_object.h5ad\")"},{"path":"/articles/MyocardialInfarction.html","id":"ligand-receptor-interaction-prediction-with-liana","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","what":"Ligand-Receptor Interaction Prediction with LIANA","title":"CrossTalkeR Example - Human Myocardial Infarction","text":"can run CrossTalkeR, need prediction ligand-receptor interaction data set. Due large sample size using python version LIANA better performance:","code":"import scanpy as sc import liana as li import pandas as pd import os  out_path = \"/out/path/\" data = sc.read_h5ad(\"heart_data_object.h5ad\")  data.raw = data  for i in set(data.obs['sampleType']):     print(i)     lr=li.method.cellphonedb(data[data.obs['sampleType']==i],                         groupby='cell_subtype2',                         expr_prop=0.1,                         verbose=True,                         resource_name='consensus',inplace=False)     lr.to_csv(f\"{out_path}{i}_lr_liana_consensus.csv\")  for i in os.listdir(out_path):     if i.endswith('lr_liana_consensus.csv'):         evfull = pd.read_csv(out_path+i)         evfull = evfull.loc[:,['ligand','receptor_complex','source','target','lr_means','cellphone_pvals']]         evfull['type_gene_A'] = 'Ligand'         evfull['type_gene_B'] = 'Receptor'         evfull['gene_A'] = evfull['ligand']         evfull['gene_B'] = evfull['receptor_complex']         evfull['MeanLR'] = evfull['lr_means']         k = i[0:i.find('_lr_')]         evfull = evfull.loc[list(evfull.cellphone_pvals.to_numpy()<=0.05),:]         evfull = evfull.loc[:, ['source', 'target', 'type_gene_A', 'type_gene_B', 'gene_A', 'gene_B', 'MeanLR']].to_csv(f'{out_path}{k}_lr_ready.csv')"},{"path":"/articles/MyocardialInfarction.html","id":"intracellular-communication-analysis-with-intratalker","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","what":"Intracellular Communication Analysis with IntraTalker","title":"CrossTalkeR Example - Human Myocardial Infarction","text":"can analyze ligand-receptor interactions also intracellular communication. use transcription factor activity predictions decoupler IntraTalker package. Similar usage LIANA using python version decoupler: find transcription factors show significant different conditions connect transcription factors upstream receptors downstream ligands use IntraTalker package. First generate intracellular communication tables based:","code":"import scanpy as sc import decoupler as dc import pandas as pd  file = \"heart_data_object.h5ad\" reg = pd.read_csv(\"regulon_dorothea_human_AB.csv\") ann_data = sc.read_h5ad(file)  dc.run_ulm(     mat=ann_data,     net=reg,     source='source',     target='target',     weight='weight',     verbose=True,     use_raw=False ) estimates =ann_data.obsm['ulm_estimate'] estimates.to_csv(\"/out/path/decoupler_dorotheaAB_results_ulm.csv\") library(Seurat) library(tibble) library(dplyr) library(igraph) library(stringr) library(LR2TF) library(CrossTalkeR)  heart_data_object <- readRDS(\"heart_data_object.rds\")  parameters <- list(\"out_path\" = \"/out/path/\",                    reg = \"regulon_dorothea_human_AB.csv\",                    \"organism\" = \"human\",                    \"celltype\" = \"cell_subtype2\",                    \"condition\" = \"sampleType\",                    \"comparison_list\" = list(c(\"ischemic\", \"myogenic\")),                    \"logfc\" = 1,                    \"pval\" = 0.05)   results <- LR2TF::tf_activity_analysis(seuratobject = heart_data_object,                                        tf_activities = \"/out/path/decoupler_dorotheaAB_results_ulm.csv\",                                        arguments_list = parameters)"},{"path":"/articles/MyocardialInfarction.html","id":"input-preparation-for-crosstalker","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","what":"Input Preparation for CrossTalkeR","title":"CrossTalkeR Example - Human Myocardial Infarction","text":"next step, combine ligand-receptor intracellular communication predictions generate input CrossTalkeR: now input data CrossTalkeR ready can run analysis.","code":"ischemic_LR <- read.csv(\"/out/path/ischemic_lr_ready.csv\", header = TRUE, row.names = 1) myogenic_LR <- read.csv(\"/out/path/myogenic_lr_ready.csv\", header = TRUE, row.names = 1)  ischemic_combined <- LR2TF::combine_LR_and_TF_complexes(results@CTR_input_condition$ischemic,                                                      ischemic_LR,                                                      \"/out/path/\",                                                      \"ischemic\") myogenic_combined <- LR2TF::combine_LR_and_TF_complexes(results@CTR_input_condition$myogenic,                                                      myogenic_LR,                                                      \"/out/path/\",                                                      \"myogenic\")"},{"path":"/articles/MyocardialInfarction.html","id":"running-crosstalker","dir":"Articles","previous_headings":"Cell-Cell Communication Analysis of Human Myelofibrosis scRNA-seq Data Using CrossTalkeR","what":"Running CrossTalkeR","title":"CrossTalkeR Example - Human Myocardial Infarction","text":"last step run CrossTalkeR:  ","code":"paths <- list('myogenic' = myogenic_combined,                             'ischemic' = ischemic_combined)  data <- generate_report(paths,                             out_path = \"/out/path/\",                             threshold = 0,                             out_file = 'myocardial_infarction.html',                             output_fmt = \"html_document\",                             org = \"hsa\",                             comparison = list(c('ischemic', 'myogenic')),                             filtered_net = T)"},{"path":"/articles/MyocardialInfarction.html","id":"crosstalker-results-ischemic-vs-myogenic-condition","dir":"Articles","previous_headings":"","what":"CrossTalkeR Results Ischemic vs Myogenic condition","title":"CrossTalkeR Example - Human Myocardial Infarction","text":"second part tutorial focuses results comparative analysis ischemic versus myogenic conditions.","code":""},{"path":"/articles/MyocardialInfarction.html","id":"cci-results","dir":"Articles","previous_headings":"CrossTalkeR Results Ischemic vs Myogenic condition","what":"CCI Results","title":"CrossTalkeR Example - Human Myocardial Infarction","text":"start result analysis cell-cell interaction (CCI) analysis CrossTalkeR therefore take look CCI network plot:  ischemic condition, CCIs generally reduced. However, certain cell types remain notably important, highlighted higher Pagerank scores. key cell types include cardiomyocyte clusters, two four fibroblast clusters, specific myeloid cells, SPP1-expressing macrophages mast cells. findings indicate despite reduced overall interactions, cell types predicted central role CCI network ischemic condition. CrossTalkeR also offers refined CCI network employing Fisher’s exact test filter network based interaction proportions. can plot resulting statistics Violon Plot:  Statistically significant points labeled names corresponding edge pairs, significance threshold set p-value greater 0.05 log2 fold change one. see many significant interactions involve high Pagerank cell types, including fibroblast, cardiomyocyte, myeloid cell clusters. Using threshold (default CrossTalkeR), can retain interacting cell pairs p-value greater 0.05 example, replot CCI network:  filtered CCI plot, positive edges become visible, though cell types remain except Neuronal Purkinje_fibers clusters. Pagerank nodes remains largely unchanged. can also examine filtered CCI network help heatmap:    heatmap provides detailed view interactions cell types. color intensity corresponds edge weight CCI plot, red indicating positive blue indicating negative interaction score ischemic condition. sender cell type (Receptor cluster) x axis, receiving cell type (Ligand Cluster) y axis. can use order cell types heatmap reorder nodes CCI plot. sorting nodes order sending clusters heatmap.    confirm top cell types identified Pagerank, can examine Pagerank scores detail using bar plot:  can take look Influencer Listener ranking observe cell types sending receiving:   plots highlight nearly cell types predicted communicate less ischemic condition compared myogenic condition. Exceptions include Lymphatic_Endo Fib3_C7 clusters, exhibit higher Influencer Score ischemic condition (indicating outgoing signals). Additionally, Lymphatic_Endo, damaged_CM, Mast clusters show higher Listener Score, indicating incoming signals ischemia. observations CCI level consistent findings paper. instance, fibrotic structures prominent ischemic condition, also reflected Pagerank scores, least two four fibroblast clusters higher Pagerank ischemic condition.","code":"plot_cci(graph = data@graphs$ischemic_x_myogenic,         colors = data@colors,         plt_name = \"ischemic vs myogenic\",         coords = data@coords[V(data@graphs$ischemic_x_myogenic)$name,],         emax = NULL,         leg = FALSE,         low = 0,         high = 0,         ignore_alpha = FALSE,         log = FALSE,         efactor = 8,         vfactor = 12,          pg = data@rankings[[\"ischemic_x_myogenic\"]]$Pagerank) EnhancedVolcano(data@stats$ischemic_x_myogenic,                 lab = data@stats$ischemic_x_myogenic$columns_name,                 x = \"lodds\",                 y = \"p\",                 pCutoff = 0.05) plot_cci(graph = data@graphs$ischemic_x_myogenic_filtered,         colors = data@colors,         plt_name = \"ischemic vs myogenic filtered\",         coords = data@coords[V(data@graphs$ischemic_x_myogenic_filtered)$name,],         emax = NULL,         leg = FALSE,         low = 0,         high = 0,         ignore_alpha = FALSE,         log = FALSE,         efactor = 8,         vfactor = 12,         pg = data@rankings[[\"ischemic_x_myogenic_filtered\"]]$Pagerank) entries <- names(data@graphs)[grep(\"_x_\",names(data@graphs))] entries <- entries[grep(\"filtered\",entries)] for(i in entries){       p1<-plot_Heatmap(graph=data@graphs[[i]],weight = \"LRScore\")       draw(p1) } # Extracting the cell cluster order from the Heatmap row_order <- row_order(p1) ordered_row_names <- rownames(p1@ht_list[[1]]@matrix)[row_order]  # Generating a new layout template for the CCI plot and define order of the nodes template <- igraph::make_full_graph(   n = length(ordered_row_names),   directed = TRUE,   loops = TRUE ) new_circle <- igraph::layout_in_circle(template) rownames(new_circle) <- ordered_row_names  plot_cci(graph = data@graphs$ischemic_x_myogenic_filtered,         colors = data@colors,         plt_name = 'ischemic vs myogenic filtered',         coords = new_circle[V(data@graphs$ischemic_x_myogenic_filtered)$name,],         emax = NULL,         leg = FALSE,         low = 0,         high = 0,         ignore_alpha = FALSE,         log = FALSE,         efactor = 8,         vfactor = 12,          pg = data@rankings[[\"ischemic_x_myogenic_filtered\"]]$Pagerank,         node_label_position = 1.3) plot_bar_rankings(data, \"ischemic_x_myogenic_filtered\", \"Pagerank\", type = NULL, filter_sign = NULL) plot_bar_rankings(data, \"ischemic_x_myogenic_filtered\", \"Influencer\", type = NULL, filter_sign = NULL) plot_bar_rankings(data, \"ischemic_x_myogenic_filtered\", \"Listener\", type = NULL, filter_sign = NULL)"},{"path":"/articles/MyocardialInfarction.html","id":"cgi-results","dir":"Articles","previous_headings":"CrossTalkeR Results Ischemic vs Myogenic condition","what":"CGI Results","title":"CrossTalkeR Example - Human Myocardial Infarction","text":"Next, shift gene-cell interaction (GCI) level. Similar CCI level, can examine network’s topological rankings. begin reviewing top Pagerank results, identify genes within specific cell type important network’s signaling. now, focus exclusively ligand-receptor (LR) interactions.    top genes, find ligands (L) receptors (R). Many genes involved immune system processes, integrin receptors (e.g., ITGA10_ITGB1, ITGA9, ITGB1, others). predicted play larger role certain clusters (e.g., Venous_Endo, Lymphatic_Endo, SPP1_macrophages) smaller role others (e.g., Pericyte_1, CD_4, Pericyte_2). Additionally, TGFB1 ligand among top genes damaged_CM cluster. gain clearer understanding outgoing incoming signals, examine ligands top Influencer scores receptors top Listener scores:     list top influencers mainly includes genes important wound healing, fibrosis, immune response (e.g., TGFB1, collagens, etc.). receptors primarily integrin receptors subunits CD44, play key roles immune response tissue repair processes. results, already described paper, support findings. Next, create Sankey plots ischemic vs. myogenic comparisons, shown extended figures 12d e original paper. important note plots may differ slightly, using newer versions LIANA package , simplicity, considering fewer samples tutorial. begin Sankey plots showing signaling Fib2 SPP1_Macrophages clusters (directions):       Additionally, Sankey plot created subset cell types, displaying interactions involving TGFB1 ligand:   ","code":"plot_bar_rankings(data, \"ischemic_x_myogenic_ggi\", \"Pagerank\", type = \"LR\", filter_sign = NULL, mode = \"cgi\") plot_bar_rankings(data, \"ischemic_x_myogenic_ggi\", \"Influencer\", type = \"L\", filter_sign = NULL, mode = \"cgi\") plot_bar_rankings(data, \"ischemic_x_myogenic_ggi\", \"Listener\", type = \"R\", filter_sign = NULL, mode = \"cgi\") plot_sankey(data@tables$ischemic_x_myogenic,     target = NULL,     ligand_cluster = \"Fib2_Myofib\",     receptor_cluster = \"SPP1_Macrophages\",     plt_name = \"Fib2_Myofib to SPP1_Macrophages Signaling ischemic vs myogenic\",     threshold = 30,      tfflag = FALSE ) plot_sankey(data@tables$ischemic_x_myogenic,     target = NULL,     ligand_cluster = \"SPP1_Macrophages\",     receptor_cluster = \"Fib2_Myofib\",     plt_name = \"SPP1_Macrophages to Fib2_Myofib Signaling ischemic vs myogenic\",     threshold = 30,      tfflag = FALSE ) subset <- c(\"LYVE_FOLR_Macrophages\", \"LYVE_PLTP_Macrophages\", \"CCL18_Macrophages\", \"SPP1_Macrophages\", \"Monocytes\", \"Fib4_COL15A1\", \"Fib3_C7\", \"Fib2_Myofib\", \"Fib1_SCARA5\")  plot_sankey(data@tables$ischemic_x_myogenic,     target = \"TGFB1|L\",     ligand_cluster = subset,     receptor_cluster = subset,     plt_name = \"TGFB1 Signaling Between Cell Type Subset ischemic vs myogenic\",     threshold = 30,     tfflag = FALSE)"},{"path":"/articles/ProgenyLRExample.html","id":"ligand-receptor-pathway-enrichment-with-progeny---example","dir":"Articles","previous_headings":"","what":"Ligand-Receptor Pathway Enrichment with Progeny - Example","title":"Ligand-Receptor Pathway Enrichment with Progeny - Bone Marrow Fibrosis in Human","text":"liana+ Python documentation includes example performing pathway enrichment ligand-receptor interactions derived tensor cell2cell analysis (liana+ Tutorial). , apply downstream pathway enrichment approach CrossTalkeR results using human bone marrow example data (Tutorial).","code":""},{"path":"/articles/ProgenyLRExample.html","id":"filter-crosstalker-results-in-r","dir":"Articles","previous_headings":"Ligand-Receptor Pathway Enrichment with Progeny - Example","what":"Filter CrossTalkeR Results (in R)","title":"Ligand-Receptor Pathway Enrichment with Progeny - Bone Marrow Fibrosis in Human","text":"begin loading CrossTalkeR object extracting table ligand-receptor interactions obtained comparison analysis control disease conditions. facilitate use liana+ functions, reformat filter table, resulting structured dataset ligand-receptor pairs first column corresponding LRScores cell pair columns. Due certain functionalities unavailable R version liana, subsequent analyses conducted Python.","code":"library(CrossTalkeR)  CrossTalkeR_results <- readRDS(\"LR_data_final.Rds\") EXP_x_CTR_table <- as.data.frame(CrossTalkeR_results@tables$EXP_x_CTR) source_cluster <- c(\"MSC\", \"Megakaryocyte\", \"Fibroblast\", \"Myeloid\") target_cluster <- c(\"MSC\", \"Megakaryocyte\", \"Fibroblast\", \"Myeloid\")  merged_df <- data.frame()  for (source in source_cluster){   for (target in target_cluster) {     comparisonLR_filtered <- EXP_x_CTR_table[EXP_x_CTR_table$source == source & EXP_x_CTR_table$target == target, ]          comparisonLR_filtered$genepair <- paste(gsub(\"\\\\|L\", \"\", as.character(comparisonLR_filtered$gene_A)),                                             gsub(\"\\\\|R\", \"\", as.character(comparisonLR_filtered$gene_B)),                                             sep = \"@\")          comparisonLR_filtered <- data.frame(LRScore = comparisonLR_filtered$LRScore, row.names = comparisonLR_filtered$genepair)     colnames(comparisonLR_filtered) <- paste(source, target, sep = \"_\")          if (nrow(merged_df) == 0) {       merged_df <- comparisonLR_filtered     } else {       merged_df <- merge(merged_df, comparisonLR_filtered, by = \"row.names\", all = TRUE)       rownames(merged_df) <- merged_df$Row.names       merged_df <- merged_df[ , -1]     }   } }  write.csv(merged_df, paste(\"pairwise_LR_interactions.csv\"))"},{"path":"/articles/ProgenyLRExample.html","id":"enrichment-analysis-with-progeny-and-decoupler-in-python","dir":"Articles","previous_headings":"Ligand-Receptor Pathway Enrichment with Progeny - Example","what":"Enrichment Analysis with Progeny and decoupleR (in Python)","title":"Ligand-Receptor Pathway Enrichment with Progeny - Bone Marrow Fibrosis in Human","text":"start loading necessary Python libraries. perform pathway enrichment analysis, require pathway database containing gene sets. purpose, utilize Progeny Pathway database, setting top argument 20,000 load complete dataset. Since analysis considers ligand-receptor pairs rather individual genes, must first map interactions relevant pathways. achieve , load Consensus database liana, also used ligand-receptor interaction inference data. dedicated function assigns ligand-receptor pairs respective pathways. Next, incorporate ligand-receptor interactions interest, extracted CrossTalkeR results, conduct enrichment analysis using decoupler ULM method along ligand-receptor pathway mapping. analysis yields two data frames: one containing enrichment estimation values another reporting corresponding p-values, indicating statistical significance. Since consider multiple cell pairs, need iterate coloumns interactions table.","code":"import pandas as pd  import liana as li import omnipath as op import decoupler as dc  import seaborn as sns import matplotlib.pyplot as plt # Load Progeny Pathway Database progeny = dc.get_progeny(organism='human', top=20000) # Load Ligand-Receptor Pairs from liana Consensus Database lr_pairs = li.resource.select_resource('consensus')  # Assign Ligand-Receptor Pairs to Progeny Pathways lr_progeny = li.rs.generate_lr_geneset(lr_pairs, progeny, lr_sep=\"@\") # Load Ligand-Receptor Interactions for Enrichment Analysis lr_interactions = pd.read_csv(\"pairwise_LR_interactions.csv\", index_col=0)  # Empty Lists for Enrichment Results estimate_list = [] pvals_list = []  for col in lr_interactions.columns:          filtered_df = pd.DataFrame(lr_interactions[lr_interactions[col] != 0][col])          # Run Enrichment Analysis with decoupleR ULM Method     estimate, pvals = dc.run_ulm(filtered_df.T, lr_progeny, source=\"source\", target=\"interaction\", use_raw=False)          estimate_list.append(estimate)     pvals_list.append(pvals)  # Merge Enrichment Results and Replace NaN Values merged_estimate = pd.concat(estimate_list, axis=0) merged_estimate.fillna(0, inplace=True) merged_pvals = pd.concat(pvals_list, axis=0)"},{"path":"/articles/ProgenyLRExample.html","id":"visualize-results-in-python","dir":"Articles","previous_headings":"Ligand-Receptor Pathway Enrichment with Progeny - Example","what":"Visualize Results (in Python)","title":"Ligand-Receptor Pathway Enrichment with Progeny - Bone Marrow Fibrosis in Human","text":"visualize results, generate heatmap using seaborn. highlight pathways significant enrichment estimations, first create annotation data frame, incorporated heatmap visualization.   heatmap highlights pathway-specific enrichment ligand–receptor interactions across cell–cell communication pairs. Notably, observe strong positive enrichment TGFβ signaling MSC--MSC interactions EGFR signaling Fibroblasts Megakaryocytes. contrast, several pathways show negative enrichment patterns, VEGF signaling MSC--MSC communication.","code":"# Mapping to Vizualize P-Value Significance Levels def p_value_to_asterisks(p):     if p < 0.001:         return '***'     elif p < 0.01:         return '**'     elif p < 0.05:         return '*'     else:         return ' ' pval_mapping = merged_pvals.applymap(p_value_to_asterisks)  # Removing rows with only non-significnt enrichment values is_significant_enriched = pval_mapping.apply(lambda row: any('*' in str(val) for val in row), axis=1) filtered_estimate = merged_estimate[is_significant_enriched] filtered_pval_mapping = pval_mapping[is_significant_enriched]   # Vizualize Enrichment Results with Seaborn Clustermap sns.clustermap(filtered_estimate,                 annot=filtered_pval_mapping,                fmt='',                row_cluster=False,                figsize=(7, 2),                cmap=\"vlag\",                cbar_pos=(1, .2, .03, .4),                vmin=-3.5,                vmax=3.5)"},{"path":"/articles/ProgenyLRExample.html","id":"extraction-and-visualization-of-tgfb-related-ligand-receptor-interactions","dir":"Articles","previous_headings":"Ligand-Receptor Pathway Enrichment with Progeny - Example","what":"Extraction and Visualization of TGFb-Related Ligand-Receptor Interactions","title":"Ligand-Receptor Pathway Enrichment with Progeny - Bone Marrow Fibrosis in Human","text":"dissect interaction analysis relate TGFb pathway, can extract relevant ligand-receptor pairs ftom previous assignment progeny database: saved ligand-receptor pairs, can filter differential interactions table CrossTalkeR visualize TGFb-related interactions sankey plot:","code":"# Extracting all TGFb-related Ligand-Receptor Interactions TGFb_interactions = lr_progeny[lr_progeny['source'] == 'TGFb']  # Split the \"interaction\" column by \"@\" split_interactions = TGFb_interactions['interaction'].str.split('@', expand=True)  # Rename the columns to \"ligand\" and \"receptor\" split_interactions.rename(columns={0: 'ligand', 1: 'receptor'}, inplace=True)  # Save the result as a CSV file split_interactions.to_csv(\"/home/vanessa/Projekte/Documentation_Scripts/Human_BM_complete_vignette_code/TGFb_interactions.csv\", index=False) # Load CSV file with TGFb-related interactions from Progeny TGFb_interactions <- read.csv(\"/home/vanessa/Projekte/Documentation_Scripts/Human_BM_complete_vignette_code/TGFb_interactions.csv\")  # Add suffixes to ligand and receptor columns TGFb_interactions$ligand <- paste0(TGFb_interactions$ligand, \"|L\") TGFb_interactions$receptor <- paste0(TGFb_interactions$receptor, \"|R\")  # Filter the differential EXP_x_CTR table for TGFb-related interactions TGFb_filtered_interactions <- EXP_x_CTR_table[EXP_x_CTR_table$gene_A %in% TGFb_interactions$ligand &                                               EXP_x_CTR_table$gene_B %in% TGFb_interactions$receptor, ]  #Plot the filtered interactions with CrossTalkeR sankey plot function plot_sankey(TGFb_filtered_interactions,             target = NULL,             ligand_cluster = \"MSC\",             receptor_cluster = \"Fibroblast\",             plt_name = \"TGFb Signaling Related Interactions MSC to Fibroblast EXP vs CTR\",             threshold = 10, tfflag = FALSE)"},{"path":"/articles/run_liana.html","id":"run-liana-for-ligand-receptor-interaction-prediction-in-r","dir":"Articles","previous_headings":"","what":"Run LIANA for Ligand-Receptor Interaction Prediction in R","title":"Run liana for Ligand Receptor Interaction Prediction","text":"input CrossTalkeR need tables predicted ligand-receptor interactions different sample conditions. recommend using liana framework, provides multiple ligand-receptor interaction inference methods databases. analysis can performed Seurat SingleCellExperiment objects. , show run liana Seurat object input, using CellphoneDB method Consensus database: First, importing necessary libraries loading Seurat object. Since want predict ligand-receptor interactions sample condition object, splitting object using corresponding meta data column. run liana condition, filter results p-value provided. saving result table, reformat results match CrossTalkeRs input format renaming adding gene type information columns. resulting tables can directly used CrossTalkeR analysis.","code":"library(Seurat) library(dplyr) library(liana)  seurat_object <- readRDS(\"/path/to/Seurat/object.Rds\")  outpath <- \"/path/to/save/results/\" pval_threshold <- 0.05  seurat_object_list <- SplitObject(seurat_object, split.by = \"condition\") for (condition in names(seurat_object_list)) {   sub_object <- seurat_object_list[[condition]]    liana_results <- liana_wrap(sub_object,     method = \"cellphonedb\",     resource = c(\"Consensus\"),     expr_prop = 0.1   )    liana_results <- liana_results %>%     filter(pvalue < pval_threshold) %>%     select(source, target, ligand, receptor.complex, lr.mean) %>%     rename(gene_A = ligand, gene_B = receptor.complex, MeanLR = lr.mean)   liana_results$type_gene_A = 'Ligand'   liana_results$type_gene_B = 'Receptor'    write.csv(liana_results, paste0(outpath, condition, \"_LR.csv\")) }"},{"path":"/articles/run_liana.html","id":"run-liana-for-ligand-receptor-interaction-prediction-in-python","dir":"Articles","previous_headings":"","what":"Run LIANA for Ligand-Receptor Interaction Prediction in Python","title":"Run liana for Ligand Receptor Interaction Prediction","text":"can also use python version package liana. package provides different methods databases analysis intercellular interactions based scRNA-seq data AnnData format. Tutorial, describe recommendation using liana package python.","code":""},{"path":"/articles/run_liana.html","id":"import-necessary-libraries","dir":"Articles","previous_headings":"Run LIANA for Ligand-Receptor Interaction Prediction in Python","what":"Import Necessary libraries","title":"Run liana for Ligand Receptor Interaction Prediction","text":"First , libraries necessary using liana must loaded: assume necessary libraries already installed.","code":"import scanpy as sc import liana as li import pandas as pd import os"},{"path":"/articles/run_liana.html","id":"load-scrna-seq-data","dir":"Articles","previous_headings":"Run LIANA for Ligand-Receptor Interaction Prediction in Python","what":"Load scRNA-seq Data","title":"Run liana for Ligand Receptor Interaction Prediction","text":"last step perfoming analysis load AnnData object scRNA-seq data","code":"data = sc.read_h5ad(\"/path/to/AnnData/file.h5ad\") data.raw = data"},{"path":"/articles/run_liana.html","id":"execution-of-ligand-receptor-interaction-analysis","dir":"Articles","previous_headings":"Run LIANA for Ligand-Receptor Interaction Prediction in Python","what":"Execution of Ligand-Receptor Interaction Analysis","title":"Run liana for Ligand Receptor Interaction Prediction","text":"mentioned beginning, different methods databases implemented liana package. recommend using CellphoneDB analysis combination consensus database intercellular interactions. Note metadata fields available sample/conditions (field_with_condition) cell annotations (field_with_cell_annotation) still specified user.","code":"for i in set(data.obs['field_with_condition']):     print(i)     lr=li.method.cellphonedb(data[data.obs['field_with_condition']==i],                           groupby='field_with_cell_annotation',                           expr_prop=0.1,                           verbose=True,                           resource_name='consensus',                           inplace=False)     lr.to_csv(f\"{i}_lr_liana_consensus_unfiltered.csv\")"},{"path":"/articles/run_liana.html","id":"filtering-and-formatting-of-the-results","dir":"Articles","previous_headings":"Run LIANA for Ligand-Receptor Interaction Prediction in Python","what":"Filtering and Formatting of the Results","title":"Run liana for Ligand Receptor Interaction Prediction","text":"Finally, result tables filtered CellphoneDB p-value (example p-val < 0.05) converted CrossTalkeR input format. default, interaction table used CrossTalkeR contain columns “source”, “target”, “type_gene_A”, “gene_A”, “type_gene_B”, “gene_B” “MeanLR”.","code":"data = {} for i in os.listdir():     if i.endswith('lr_liana_consensus_unfiltered.csv'):         evfull = pd.read_csv(i)         evfull = evfull.loc[:,['ligand','receptor.complex','source','target','lr_means','cellphone_pvals']]         evfull['type_gene_A'] = 'Ligand'         evfull['type_gene_B'] = 'Receptor'         evfull['gene_A'] = evfull['ligand']         evfull['gene_B'] = evfull['receptor.complex']         evfull['MeanLR'] = evfull['lr_means']         evfull.loc[list(evfull.cellphone_pvals.to_numpy()<=0.05),:].to_csv(f'{k}_lr_ready.csv')         evfull = evfull.loc[:, ['source', 'target', 'type_gene_A', 'type_gene_B', 'gene_A', 'gene_B', 'MeanLR']]         k=i[0:i.find('_lr_')]         data[k]=os.path.abspath(f'{k}_lr_ready.csv')"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vanessa Kloeker. Author. James Shiniti Nagai. Author, maintainer. Nils Leimkühler. Author. Michael T. Schaub. Author. Rebekka Schneider. Author. Ivan Costa Gesteira. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kloeker V, Nagai J, Leimkühler N, Schaub M, Schneider R, Gesteira (2025). CrossTalkeR: Single Cell Ligand Receptor Downstream analysis. R package version 2.0.0, https://github.com/CostaLab/CrossTalkeR.","code":"@Manual{,   title = {CrossTalkeR: Single Cell Ligand Receptor Downstream analysis},   author = {Vanessa Kloeker and James Shiniti Nagai and Nils Leimkühler and Michael T. Schaub and Rebekka Schneider and Ivan Costa Gesteira},   year = {2025},   note = {R package version 2.0.0},   url = {https://github.com/CostaLab/CrossTalkeR}, }"},{"path":"/index.html","id":"crosstalker-","dir":"","previous_headings":"","what":"Single Cell Ligand Receptor Downstream analysis","title":"Single Cell Ligand Receptor Downstream analysis","text":"James S. Nagai1, Nils B. Leimkühler2, Michael T. Schaub 3, Rebekka K. Schneider4,5,6, Ivan G. Costa1* 1Institute Computational Genomics, Faculty Medicine, RWTH Aachen University, Aachen, 52074 Germany 2Department Hematology Stem Cell Transplantation, University Hospital Essen, Germany 3Department Computer Science, RWTH Aachen University, Germany 4Department Cell Biology, Institute Biomedical Engineering, Faculty Medicine,RWTH Aachen University, Pauwelsstrasse 30, 52074 Aachen, NRW, Germany 5Oncode Institute, Erasmus Medical Center, Rotterdam, 3015GD, Netherlands 6Department Hematology, Erasmus Medical Center, Rotterdam, 3015GD, Netherlands  Motivation: Ligand-receptor (LR) analysis allows characterization cellular crosstalk single cell RNA-seq data. However, current LR methods provide limited approaches prioritization cell types, ligands receptors characterizing changes crosstalk two biological conditions. Results: CrossTalkeR framework network analysis visualisation LR networks. CrossTalkeR identifies relevant ligands, receptors cell types contributing changes cell communication contrasting two biological states: disease vs. homeostasis. case study scRNA-seq human myeloproliferative neoplasms reinforces strengths CrossTalkeR characterisation changes cellular crosstalk disease state.","code":""},{"path":"/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Single Cell Ligand Receptor Downstream analysis","text":"can install CrossTalkeR simple commands : Note: Please avoid use following characters celltype name: ‘$’","code":"install.packages(\"devtools\") devtools::install_github(\"https://github.com/CostaLab/CrossTalkeR\", build_vignettes = TRUE) require(CrossTalkeR)"},{"path":"/index.html","id":"possible-system-dependencies","dir":"","previous_headings":"","what":"Possible system dependencies","title":"Single Cell Ligand Receptor Downstream analysis","text":"","code":"libudunits2-dev libgdal-dev gdal-bin libproj-dev proj-data proj-bin libgeos-dev"},{"path":"/index.html","id":"crosstalker-plots-examples-and-vignette","dir":"","previous_headings":"","what":"CrossTalkeR Plots examples and vignette","title":"Single Cell Ligand Receptor Downstream analysis","text":"provide vignette examples analyse cell interactions human myelofibrosis single cell RNA-seq.","code":"vignette('CrossTalkeR-HumanMyfib')"},{"path":"/index.html","id":"crosstalker-python-package-","dir":"","previous_headings":"","what":"CrossTalkeR Python Package 🐍","title":"Single Cell Ligand Receptor Downstream analysis","text":"package now available Python — bring differential cell-cell communication analysis Python environment! can find information Read Docs Integration scverse ecosystem underway.","code":""},{"path":"/index.html","id":"crosstalker-docker-image","dir":"","previous_headings":"","what":"CrossTalkeR Docker image","title":"Single Cell Ligand Receptor Downstream analysis","text":"provide access Docker image, available : https://gitlab.com/sysbiobig/ismb-eccb-2025-tutorial-vt3/container_registry. Docker image comes preconfigured necessary libraries, tools, software required follow hands-exercises.","code":""},{"path":"/index.html","id":"id_-crosstalker-realease-v20---new-features-","dir":"","previous_headings":"","what":"🔥 CrossTalkeR Realease v2.0 - New Features 🔥","title":"Single Cell Ligand Receptor Downstream analysis","text":"Statistical Filtering Fisher’s Exact Test Filter cell-cell communication networks using Fisher’s test identify statistically significant interactions. Volcano Plot Visualization Visualize results Fisher’s test volcano plot Heatmap Visualization Clustering Explore communication patterns across cell types using heatmaps, including clustering interaction weights Comprehensive Topological Analysis Generate bar plots calculated network topological measures, separately : cell–cell interaction networks cell-gene interaction networks Ligand–Receptor Enrichment Analysis PROGENy Step--step tutorial pathway enrichment analysis ligand–receptor pairs using PROGENy. Modeling Intracellular Communication Extend communication network incorporating transcription factors model intracellular signaling. Integration LIANA+ Seamlessly using ligand-receptor interaction results LIANA+. provide detailed tutorial perform integration Run liana Compatibility scSeqComm Use scSeqComm outputs inputs CrossTalkeR framework downstream comparative analysis.","code":""},{"path":"/index.html","id":"features-v140","dir":"","previous_headings":"","what":"Features v1.4.0","title":"Single Cell Ligand Receptor Downstream analysis","text":"analise_LR() run analysis without generating CrossTalkeR report make_report() generate new CrossTalkeR report existing CrossTalkeR results now consider annotation gene ligand (L) receptor (R) consider biological function Less constrains cell cluster name annotation (‘$’ must avoided cluster naming) Integration liana-py ligand-receptor interaction predictions","code":""},{"path":"/index.html","id":"features-v130","dir":"","previous_headings":"","what":"Features v1.3.0","title":"Single Cell Ligand Receptor Downstream analysis","text":"Cell Cell Interaction visualization Sending Receiving Cells Ranking Gene Target based Sankey Plots measures PC table PC1 PC2 based barplot Leimkühler et. al. [2] data added package Fisher Test implemented highlight CCI edges significance (new) python3 notebook available cast old input new input. Liana (Dimitrov et. al. [3]) Output can used CrossTalkeR input. LR pair visualization plot can done using Seurat Object","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Single Cell Ligand Receptor Downstream analysis","text":"[1] CrossTalkeR: Analysis Visualisation Ligand Receptor Networks link [2] Heterogeneous bone-marrow stromal progenitors drive myelofibrosis via druggable alarmin axis. link [3] Comparison Resources Methods infer Cell-Cell Communication Single-cell RNA Data link","code":""},{"path":"/reference/LRObj-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Run and Generate all LR Downstream analysis — LRObj-class","title":"Run and Generate all LR Downstream analysis — LRObj-class","text":"function loads single conditions LR outputs return LR network assumes table present following columns Ligand, measure","code":""},{"path":"/reference/LRObj-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Run and Generate all LR Downstream analysis — LRObj-class","text":"graphs Cell Cell Interaction Networks tables tables single condition max_iter Max meanLR max_nodes Celltype experiment coords Cell Cell Interaction Plots colors Cell type colors rankings Ranking cells Genes loadings CCI values remove multiple times genes pca PCA results annot Annotation Results stats Statistics analysis","code":""},{"path":"/reference/analise_LR.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all LR Downstream analysis — analise_LR","title":"Run all LR Downstream analysis — analise_LR","text":"Core engine generate report. perform computation related CrossTalkeR","code":""},{"path":"/reference/analise_LR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all LR Downstream analysis — analise_LR","text":"","code":"analise_LR(   lrpaths,   genes = NULL,   tf_genes = NULL,   out_path,   sep = \",\",   threshold = 0,   colors = NULL,   out_file = NULL,   output_fmt = \"html_document\",   sel_columns = c(\"source\", \"target\", \"gene_A\", \"gene_B\", \"type_gene_A\", \"type_gene_B\",     \"MeanLR\"),   org = \"hsa\",   comparison = NULL,   filtered_net = F,   score_col = \"LRScore\",   p_val = 0.05 )"},{"path":"/reference/analise_LR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all LR Downstream analysis — analise_LR","text":"lrpaths Paths single condition LR data genes list genes considered sankey plots out_path output directory path sep character used csv threshold percentage edges pruned colors celltypes colorscheme out_file output file names output_fmt rmarkdown render output format parameter sel_columns columns data org organism used annotation, default \"hsa\" (human) comparison condition pairs used differential analysis filtered_net TRUE, filter CCI network based p-value score_col column name score used analysis, default \"LRScore\" p_val p-value threshold filtering network, default 0.05 report decide report generated ","code":""},{"path":"/reference/analise_LR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all LR Downstream analysis — analise_LR","text":"Rmarkdown report objects step","code":""},{"path":"/reference/analise_LR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run all LR Downstream analysis — analise_LR","text":"","code":"paths <- c(   \"CTR\" = system.file(\"extdata\",     \"CTR_LR.csv\",     package = \"CrossTalkeR\"   ),   \"EXP\" = system.file(\"extdata\",     \"EXP_LR.csv\",     package = \"CrossTalkeR\"   ) ) output <- system.file(\"extdata\", package = \"CrossTalkeR\") genes <- c(\"TGFB1\") data <- generate_report(   lrpaths = paths,   genes = genes,   out_path = paste0(output, \"/\"),   threshold = 0,   out_file = \"report.html\" ) #> Warning: file(\"\") only supports open = \"w+\" and open = \"w+b\": using the former #> Error in read.table(file = file, header = header, sep = sep, quote = quote,     dec = dec, fill = fill, comment.char = comment.char, ...): no lines available in input"},{"path":"/reference/create_diff_table.html","id":null,"dir":"Reference","previous_headings":"","what":"Read the lrobject and generate the comparative tables — create_diff_table","title":"Read the lrobject and generate the comparative tables — create_diff_table","text":"Read lrobject generate comparative tables","code":""},{"path":"/reference/create_diff_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read the lrobject and generate the comparative tables — create_diff_table","text":"","code":"create_diff_table(data, out_path, comparison = NULL, score_col = \"LRScore\")"},{"path":"/reference/create_diff_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read the lrobject and generate the comparative tables — create_diff_table","text":"data LRObj single condition out_path output path comparison condition pairs used differential analysis score_col column name score used comparison, default \"LRScore\"","code":""},{"path":"/reference/create_diff_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read the lrobject and generate the comparative tables — create_diff_table","text":"LRObject","code":""},{"path":"/reference/generate_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Run all LR Downstream analysis — generate_report","title":"Run all LR Downstream analysis — generate_report","text":"function loads single conditions LR outputs return LR network based analysis. assumes table present following columns ('source','target','gene_A','gene_B','type_gene_A','type_gene_B','MeanLR') measure","code":""},{"path":"/reference/generate_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run all LR Downstream analysis — generate_report","text":"","code":"generate_report(   lrpaths,   genes = NULL,   tf_genes = NULL,   out_path,   sep = \",\",   threshold = 0,   colors = NULL,   out_file = NULL,   report = TRUE,   output_fmt = \"html_document\",   sel_columns = c(\"source\", \"target\", \"gene_A\", \"gene_B\", \"type_gene_A\", \"type_gene_B\",     \"MeanLR\"),   org = \"hsa\",   comparison = NULL,   filtered_net = F,   score_col = \"LRScore\",   p_val = 0.05 )"},{"path":"/reference/generate_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run all LR Downstream analysis — generate_report","text":"lrpaths Paths single condition LR data genes list genes considered sankey plots out_path output directory path sep character used csv threshold percentage edges pruned colors celltypes colorscheme out_file output file names report decide report generated output_fmt rmarkdown render output format parameter sel_columns columns data org organism used annotation, default \"hsa\" (human) comparison condition pairs used differential analysis filtered_net TRUE, filter CCI network based p-value score_col column name score used analysis, default \"LRScore\" p_val p-value threshold filtering network, default 0.05","code":""},{"path":"/reference/generate_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run all LR Downstream analysis — generate_report","text":"Rmarkdown report objects step","code":""},{"path":"/reference/generate_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run all LR Downstream analysis — generate_report","text":"","code":"paths <- c(   \"CTR\" = system.file(\"extdata\",     \"CTR_LR.csv\",     package = \"CrossTalkeR\"   ),   \"EXP\" = system.file(\"extdata\",     \"EXP_LR.csv\",     package = \"CrossTalkeR\"   ) ) output <- system.file(\"extdata\", package = \"CrossTalkeR\") genes <- c(\"TGFB1\") data <- generate_report(   lrpaths = paths,   genes = genes,   out_path = paste0(output, \"/\"),   threshold = 0,   out_file = \"report.html\" ) #> Warning: file(\"\") only supports open = \"w+\" and open = \"w+b\": using the former #> Error in read.table(file = file, header = header, sep = sep, quote = quote,     dec = dec, fill = fill, comment.char = comment.char, ...): no lines available in input"},{"path":"/reference/make_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a report for given LRObj — make_report","title":"Generate a report for given LRObj — make_report","text":"Generate report given LRObj","code":""},{"path":"/reference/make_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a report for given LRObj — make_report","text":"","code":"make_report(   genes = NULL,   tf_genes = NULL,   out_path,   threshold = 0,   colors = NULL,   out_file = NULL,   output_fmt = \"html_document\",   LRObj = NULL,   sel_columns = c(\"source\", \"target\", \"gene_A\", \"gene_B\", \"type_gene_A\", \"type_gene_B\",     \"MeanLR\") )"},{"path":"/reference/make_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a report for given LRObj — make_report","text":"genes list genes considered sankey plots out_path output directory path threshold percentage edges pruned colors celltypes colorscheme out_file output file names output_fmt rmarkdown render output format parameter LRObj rmarkdown render output format parameter sel_columns columns data","code":""},{"path":"/reference/make_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a report for given LRObj — make_report","text":"Rmarkdown report objects step","code":""},{"path":"/reference/make_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a report for given LRObj — make_report","text":"","code":"paths <- c(   \"CTR\" = system.file(\"extdata\",     \"CTR_LR.csv\",     package = \"CrossTalkeR\"   ),   \"EXP\" = system.file(\"extdata\",     \"EXP_LR.csv\",     package = \"CrossTalkeR\"   ) ) output <- system.file(\"extdata\", package = \"CrossTalkeR\") genes <- c(\"TGFB1\") data <- generate_report(   lrpaths = paths,   genes = genes,   out_path = paste0(output, \"/\"),   threshold = 0,   out_file = \"report.html\" ) #> Warning: file(\"\") only supports open = \"w+\" and open = \"w+b\": using the former #> Error in read.table(file = file, header = header, sep = sep, quote = quote,     dec = dec, fill = fill, comment.char = comment.char, ...): no lines available in input"},{"path":"/reference/plot_Heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"This function generates the graph adjacency matrix Heatmap — plot_Heatmap","title":"This function generates the graph adjacency matrix Heatmap — plot_Heatmap","text":"function generates graph adjacency matrix Heatmap","code":""},{"path":"/reference/plot_Heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function generates the graph adjacency matrix Heatmap — plot_Heatmap","text":"","code":"plot_Heatmap(graph, weight)"},{"path":"/reference/plot_Heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function generates the graph adjacency matrix Heatmap — plot_Heatmap","text":"graph cell-cell communication graph weight cell-cell communication graph's slot","code":""},{"path":"/reference/plot_Heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function generates the graph adjacency matrix Heatmap — plot_Heatmap","text":"R default plot","code":""},{"path":"/reference/plot_Volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"This function generates the enhancedVolcanoplot — plot_Volcano","title":"This function generates the enhancedVolcanoplot — plot_Volcano","text":"function generates enhancedVolcanoplot","code":""},{"path":"/reference/plot_Volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function generates the enhancedVolcanoplot — plot_Volcano","text":"","code":"plot_Volcano(table, feature_name, pvalcutoff = 0.05, x = \"lodds\", y = \"p\")"},{"path":"/reference/plot_Volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function generates the enhancedVolcanoplot — plot_Volcano","text":"table Table test Results feature_name column names pvalcutoff p-value threshold x x-axis column name y y-axis column name","code":""},{"path":"/reference/plot_Volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function generates the enhancedVolcanoplot — plot_Volcano","text":"R default plot","code":""},{"path":"/reference/plot_bar_rankings.html","id":null,"dir":"Reference","previous_headings":"","what":"This function generates the barplot for a given network ranking on the CGI level. Further, the genes can be filtered by selected gene types to filter the plot. — plot_bar_rankings","title":"This function generates the barplot for a given network ranking on the CGI level. Further, the genes can be filtered by selected gene types to filter the plot. — plot_bar_rankings","text":"function generates barplot given network ranking CGI level. , genes can filtered selected gene types filter plot.","code":""},{"path":"/reference/plot_bar_rankings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function generates the barplot for a given network ranking on the CGI level. Further, the genes can be filtered by selected gene types to filter the plot. — plot_bar_rankings","text":"","code":"plot_bar_rankings(   data_object,   table_name,   ranking,   type = NULL,   filter_sign = NULL,   mode = \"cci\",   top_num = 10 )"},{"path":"/reference/plot_bar_rankings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function generates the barplot for a given network ranking on the CGI level. Further, the genes can be filtered by selected gene types to filter the plot. — plot_bar_rankings","text":"data_object LRobject data table_name name ranking table ranking name network ranking use type gene type (L,R,TF, LR/RL, RTF/TFR, LTF/TFL) filter_sign show (NULL), positive (pos), negativ (neg) results mode mode ranking (cci, ggi) top_num number top genes show positive negative direction","code":""},{"path":"/reference/plot_bar_rankings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function generates the barplot for a given network ranking on the CGI level. Further, the genes can be filtered by selected gene types to filter the plot. — plot_bar_rankings","text":"R default plot","code":""},{"path":"/reference/plot_cci.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Cell Cell Interaction — plot_cci","title":"Plot Cell Cell Interaction — plot_cci","text":"function CCI plot","code":""},{"path":"/reference/plot_cci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Cell Cell Interaction — plot_cci","text":"","code":"plot_cci(   graph,   plt_name,   emax = NULL,   leg = FALSE,   low = 25,   high = 75,   ignore_alpha = FALSE,   log = FALSE,   efactor = 8,   vfactor = 12,   vnames = TRUE,   pg = NULL,   vnamescol = NULL,   colors,   coords,   col_pallet = NULL,   standard_node_size = 20,   pg_node_size_low = 10,   pg_node_size_high = 60,   arrow_size = 0.4,   arrow_width = 0.8,   node_label_position = 1.2,   node_label_size = 0.6,   score_filter = 0,   cell_name_filter = NULL )"},{"path":"/reference/plot_cci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Cell Cell Interaction — plot_cci","text":"graph Paths single condition LR data plt_name Plot Name (Title) emax Max MeanLR across inputs, defined, method going consider max find within sample leg Set color legend low Lower threshold: parameter low high defines edges high Higher threshould filtered. Edges within interval [low\\,high] filtered. ignore_alpha include transparency plot log logscale interactions efactor edge scale factor vfactor edge scale factor vnames remove vertex labels pg pagerank values colors Cell type (Cluster) Colors coords object coordinates col_pallet Custom color pallet Edges standard_node_size Node size Pagerank values given pg_node_size_low Smallest node size Pagerank values given pg_node_size_high Largest node size Pagerank values given arrow_size Scale value arrow size arrow_width Scale value arrow width node_label_position Scale Factor move node labels node_label_size Scale Factor change node label size score_filter Filter Graph LR Score symmetrically around 0 cell_name_filter Filter incoming outgoing interactions defined cell types","code":""},{"path":"/reference/plot_cci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Cell Cell Interaction — plot_cci","text":"R default plot","code":""},{"path":"/reference/plot_cci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Cell Cell Interaction — plot_cci","text":"","code":"paths <- c(   \"CTR\" = system.file(\"extdata\",     \"CTR_LR.csv\",     package = \"CrossTalkeR\"   ),   \"EXP\" = system.file(\"extdata\",     \"EXP_LR.csv\",     package = \"CrossTalkeR\"   ) )  genes <- c(\"TGFB1\")  output <- system.file(\"extdata\", package = \"CrossTalkeR\") data <- generate_report(paths,   genes,   out_path = paste0(output, \"/\"),   threshold = 0,   out_file = \"vignettes_example.html\",   output_fmt = \"html_document\",   report = FALSE ) #> Warning: file(\"\") only supports open = \"w+\" and open = \"w+b\": using the former #> Error in read.table(file = file, header = header, sep = sep, quote = quote,     dec = dec, fill = fill, comment.char = comment.char, ...): no lines available in input plot_cci(   graph = data@graphs$CTR,   colors = data@colors,   plt_name = \"Example 1\",   coords = data@coords[igraph::V(data@graphs$CTR)$name, ],   emax = NULL,   leg = FALSE,   low = 0,   high = 0,   ignore_alpha = FALSE,   log = FALSE,   efactor = 8,   vfactor = 12,   vnames = TRUE ) #> Error in data@graphs: no applicable method for `@` applied to an object of class \"function\""},{"path":"/reference/plot_deregulated_pathways.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is a proxy to the PCA plot in comparative conditions — plot_deregulated_pathways","title":"This function is a proxy to the PCA plot in comparative conditions — plot_deregulated_pathways","text":"function proxy PCA plot comparative conditions","code":""},{"path":"/reference/plot_deregulated_pathways.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is a proxy to the PCA plot in comparative conditions — plot_deregulated_pathways","text":"","code":"plot_deregulated_pathways(data_object, name, title = NULL)"},{"path":"/reference/plot_deregulated_pathways.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function is a proxy to the PCA plot in comparative conditions — plot_deregulated_pathways","text":"data_object LRobject data name name table title title plot","code":""},{"path":"/reference/plot_deregulated_pathways.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function is a proxy to the PCA plot in comparative conditions — plot_deregulated_pathways","text":"R default plot","code":""},{"path":"/reference/plot_graph_sankey_tf.html","id":null,"dir":"Reference","previous_headings":"","what":"This function creates a sankey plot for a selected gene including transcription factor interactions. — plot_graph_sankey_tf","title":"This function creates a sankey plot for a selected gene including transcription factor interactions. — plot_graph_sankey_tf","text":"function creates sankey plot selected gene including transcription factor interactions.","code":""},{"path":"/reference/plot_graph_sankey_tf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function creates a sankey plot for a selected gene including transcription factor interactions. — plot_graph_sankey_tf","text":"","code":"plot_graph_sankey_tf(   lrobj_tbl,   pagerank_table,   target = NULL,   cluster = NULL,   target_type = NULL,   plt_name = NULL,   threshold = 50,   save_path = NULL )"},{"path":"/reference/plot_graph_sankey_tf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function creates a sankey plot for a selected gene including transcription factor interactions. — plot_graph_sankey_tf","text":"lrobj_tbl LRobject table data pagerank_table table pagerank scores target gene cluster cluster target_type type target plt_name plot title threshold top_n n value save_path path save plot","code":""},{"path":"/reference/plot_graph_sankey_tf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function creates a sankey plot for a selected gene including transcription factor interactions. — plot_graph_sankey_tf","text":"R default plot","code":""},{"path":"/reference/plot_graph_sankey_tf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function creates a sankey plot for a selected gene including transcription factor interactions. — plot_graph_sankey_tf","text":"","code":"paths <- c(   \"CTR\" = system.file(\"extdata\",     \"CTR_LR.csv\",     package = \"CrossTalkeR\"   ),   \"EXP\" = system.file(\"extdata\",     \"EXP_LR.csv\",     package = \"CrossTalkeR\"   ) ) output <- system.file(\"extdata\", package = \"CrossTalkeR\") genes <- c(\"TGFB1\")  data <- generate_report(paths,   genes,   out_path = paste0(output, \"/\"),   threshold = 0,   out_file = \"vignettes_example.html\",   output_fmt = \"html_document\",   report = FALSE ) #> Warning: file(\"\") only supports open = \"w+\" and open = \"w+b\": using the former #> Error in read.table(file = file, header = header, sep = sep, quote = quote,     dec = dec, fill = fill, comment.char = comment.char, ...): no lines available in input"},{"path":"/reference/plot_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is a proxy to the PCA plot — plot_pca","title":"This function is a proxy to the PCA plot — plot_pca","text":"function proxy PCA plot","code":""},{"path":"/reference/plot_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is a proxy to the PCA plot — plot_pca","text":"","code":"plot_pca(lrobj_tblPCA, curr, dims = c(1, 2), ret = F, ggi = TRUE)"},{"path":"/reference/plot_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function is a proxy to the PCA plot — plot_pca","text":"curr table entry dims PCA dims ret return plot ggi GGI mode lrobj_tbl LRobject table data","code":""},{"path":"/reference/plot_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function is a proxy to the PCA plot — plot_pca","text":"R default plot","code":""},{"path":"/reference/plot_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function is a proxy to the PCA plot — plot_pca","text":"","code":"paths <- c(   \"CTR\" = system.file(\"extdata\",     \"CTR_LR.csv\",     package = \"CrossTalkeR\"   ),   \"EXP\" = system.file(\"extdata\",     \"EXP_LR.csv\",     package = \"CrossTalkeR\"   ) ) output <- system.file(\"extdata\", package = \"CrossTalkeR\") genes <- c(\"TGFB1\")  data <- generate_report(paths,   genes,   out_path = paste0(output, \"/\"),   threshold = 0,   out_file = \"vignettes_example.html\",   output_fmt = \"html_document\",   report = FALSE ) #> Warning: file(\"\") only supports open = \"w+\" and open = \"w+b\": using the former #> Error in read.table(file = file, header = header, sep = sep, quote = quote,     dec = dec, fill = fill, comment.char = comment.char, ...): no lines available in input"},{"path":"/reference/plot_pca_LR_comparative.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is a proxy to the PCA plot in comparative conditions — plot_pca_LR_comparative","title":"This function is a proxy to the PCA plot in comparative conditions — plot_pca_LR_comparative","text":"function proxy PCA plot comparative conditions","code":""},{"path":"/reference/plot_pca_LR_comparative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is a proxy to the PCA plot in comparative conditions — plot_pca_LR_comparative","text":"","code":"plot_pca_LR_comparative(   lrobj_tblPCA,   pca_table,   dims = c(1, 2),   ret = F,   ggi = TRUE,   include_tf = TRUE,   gene_types = \"all\" )"},{"path":"/reference/plot_pca_LR_comparative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function is a proxy to the PCA plot in comparative conditions — plot_pca_LR_comparative","text":"lrobj_tblPCA LRobject table data pca_table table entry dims PCA dims ret return plot ggi GGI mode include_tf intracellular option gene_types filter option genes","code":""},{"path":"/reference/plot_pca_LR_comparative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function is a proxy to the PCA plot in comparative conditions — plot_pca_LR_comparative","text":"R default plot","code":""},{"path":"/reference/plot_pca_LR_comparative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function is a proxy to the PCA plot in comparative conditions — plot_pca_LR_comparative","text":"","code":"paths <- c(   \"CTR\" = system.file(\"extdata\",     \"CTR_LR.csv\",     package = \"CrossTalkeR\"   ),   \"EXP\" = system.file(\"extdata\",     \"EXP_LR.csv\",     package = \"CrossTalkeR\"   ) ) output <- system.file(\"extdata\", package = \"CrossTalkeR\") genes <- c(\"TGFB1\")  data <- generate_report(paths,   genes,   out_path = paste0(output, \"/\"),   threshold = 0,   out_file = \"vignettes_example.html\",   output_fmt = \"html_document\",   report = FALSE ) #> Warning: file(\"\") only supports open = \"w+\" and open = \"w+b\": using the former #> Error in read.table(file = file, header = header, sep = sep, quote = quote,     dec = dec, fill = fill, comment.char = comment.char, ...): no lines available in input"},{"path":"/reference/plot_sankey.html","id":null,"dir":"Reference","previous_headings":"","what":"This function plots a sankey plot for selected genes or cell types — plot_sankey","title":"This function plots a sankey plot for selected genes or cell types — plot_sankey","text":"function plots sankey plot selected genes cell types","code":""},{"path":"/reference/plot_sankey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function plots a sankey plot for selected genes or cell types — plot_sankey","text":"","code":"plot_sankey(   lrobj_tbl,   target = NULL,   ligand_cluster = NULL,   receptor_cluster = NULL,   plt_name = NULL,   threshold = 50,   tfflag = TRUE,   score_col = \"LRScore\",   fil_col = \"LRScore\" )"},{"path":"/reference/plot_sankey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function plots a sankey plot for selected genes or cell types — plot_sankey","text":"lrobj_tbl LRobject table data target gene ligand_cluster Ligand Clusters receptor_cluster Receptor Clusters plt_name plot title threshold top_n n value tfflag true, input includes transcription factors score_col column name LR Score fil_col score column name filter","code":""},{"path":"/reference/plot_sankey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function plots a sankey plot for selected genes or cell types — plot_sankey","text":"R default plot","code":""},{"path":"/reference/plot_sankey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function plots a sankey plot for selected genes or cell types — plot_sankey","text":"","code":"paths <- c(   \"CTR\" = system.file(\"extdata\",     \"CTR_LR.csv\",     package = \"CrossTalkeR\"   ),   \"EXP\" = system.file(\"extdata\",     \"EXP_LR.csv\",     package = \"CrossTalkeR\"   ) ) output <- system.file(\"extdata\", package = \"CrossTalkeR\") genes <- c(\"TGFB1\")  data <- generate_report(paths,   genes,   out_path = paste0(output, \"/\"),   threshold = 0,   out_file = \"vignettes_example.html\",   output_fmt = \"html_document\",   report = FALSE ) #> Warning: file(\"\") only supports open = \"w+\" and open = \"w+b\": using the former #> Error in read.table(file = file, header = header, sep = sep, quote = quote,     dec = dec, fill = fill, comment.char = comment.char, ...): no lines available in input"},{"path":"/reference/read_lr_single_condition.html","id":null,"dir":"Reference","previous_headings":"","what":"Read single condition tables — read_lr_single_condition","title":"Read single condition tables — read_lr_single_condition","text":"function loads single conditions LR outputs use generate report data `s object assumes table presents following columns Ligand, Ligand.Cluster, Receptor,Receptor.Cluster MeanLR/another measure","code":""},{"path":"/reference/read_lr_single_condition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read single condition tables — read_lr_single_condition","text":"","code":"read_lr_single_condition(   lrpaths,   sel_columns,   out_path = \"/tmp/\",   sep = \",\",   colors = NULL )"},{"path":"/reference/read_lr_single_condition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read single condition tables — read_lr_single_condition","text":"lrpaths Named vector lrpaths output sel_columns selected columns out_path Path deposit results sep character used divide columns input file colors colorlist","code":""},{"path":"/reference/read_lr_single_condition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read single condition tables — read_lr_single_condition","text":"LRObject","code":""},{"path":"/reference/set_coords.html","id":null,"dir":"Reference","previous_headings":"","what":"This function assigns coordinates in the sankey plots for the genes on the dataframe — set_coords","title":"This function assigns coordinates in the sankey plots for the genes on the dataframe — set_coords","text":"function assigns coordinates sankey plots genes dataframe","code":""},{"path":"/reference/set_coords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function assigns coordinates in the sankey plots for the genes on the dataframe — set_coords","text":"","code":"set_coords(df, type)"},{"path":"/reference/set_coords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function assigns coordinates in the sankey plots for the genes on the dataframe — set_coords","text":"df dataframe genes contained sankey plot type string defining type genes inside dataframe (L, R TF)","code":""},{"path":"/news/index.html","id":"crosstalker-v140","dir":"Changelog","previous_headings":"","what":"CrossTalkeR v1.4.0","title":"CrossTalkeR v1.4.0","text":"analise_LR() run analysis without generating CrossTalkeR report make_report() generate new CrossTalkeR report existing CrossTalkeR results now consider annotation gene ligand (L) receptor (R) consider biological function Less constrains cell cluster name annotation (‘$’ must avoided cluster naming) Integration liana-py ligand-receptor interaction predictions","code":""},{"path":"/news/index.html","id":"crosstalker-v130","dir":"Changelog","previous_headings":"","what":"CrossTalkeR v1.3.0","title":"CrossTalkeR v1.3.0","text":"Cell Cell Interaction visualization Sending Receiving Cells Ranking Gene Target based Sankey Plots measures PC table PC1 PC2 based barplot Leimkühler et. al. [2] data added package Fisher Test implemented highlight CCI edges significance (new) 🔥NEW🔥 python3 notebook available cast old input new input. Liana (Dimitrov et. al. [3]) Output can used CrossTalkeR input. 🔥NEW🔥 LR pair visualization plot can done using Seurat Object 🔥NEW🔥","code":""}]
